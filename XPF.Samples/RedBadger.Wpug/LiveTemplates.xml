<TemplatesExport family="Live Templates">
  <Template uid="a28f9051-74b8-4e44-ad49-d6a07cdee769" shortcut="wpug01CenteredText" description="" text="namespace RedBadger.Wpug&#xD;&#xA;{&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    public class CenteredText : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private Vector2 drawPosition;&#xD;&#xA;&#xD;&#xA;        private SpriteBatch spriteBatch;&#xD;&#xA;&#xD;&#xA;        private SpriteFont spriteFont;&#xD;&#xA;&#xD;&#xA;        private string text;&#xD;&#xA;&#xD;&#xA;        public CenteredText(Game game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.DrawString(this.spriteFont, this.text, this.drawPosition, Color.Black);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.End();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch = new SpriteBatch(this.GraphicsDevice);&#xD;&#xA;            this.spriteFont = this.Game.Content.Load&lt;SpriteFont&gt;(&quot;SpriteFont&quot;);&#xD;&#xA;&#xD;&#xA;            this.text = &quot;Windows Phone User Group&quot;;&#xD;&#xA;&#xD;&#xA;            Viewport viewport = this.GraphicsDevice.Viewport;&#xD;&#xA;            Vector2 measureString = this.spriteFont.MeasureString(this.text);&#xD;&#xA;&#xD;&#xA;            this.drawPosition.X = (viewport.Width / 2f) - (measureString.X / 2f);&#xD;&#xA;            this.drawPosition.Y = (viewport.Height / 2f) - (measureString.Y / 2f);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="1d3597d0-e7d5-4b7b-84da-d3a9048e05fc" shortcut="wpug02CenteredTextAndLogo" description="" text="namespace RedBadger.Wpug&#xD;&#xA;{&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    public class CenteredText : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private Texture2D logo;&#xD;&#xA;&#xD;&#xA;        private Vector2 logoDrawPosition;&#xD;&#xA;&#xD;&#xA;        private SpriteBatch spriteBatch;&#xD;&#xA;&#xD;&#xA;        private SpriteFont spriteFont;&#xD;&#xA;&#xD;&#xA;        private string text;&#xD;&#xA;&#xD;&#xA;        private Vector2 textDrawPosition;&#xD;&#xA;&#xD;&#xA;        public CenteredText(Game game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.DrawString(this.spriteFont, this.text, this.textDrawPosition, Color.Black);&#xD;&#xA;            this.spriteBatch.Draw(this.logo, this.logoDrawPosition, Color.White);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.End();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch = new SpriteBatch(this.GraphicsDevice);&#xD;&#xA;            this.spriteFont = this.Game.Content.Load&lt;SpriteFont&gt;(&quot;SpriteFont&quot;);&#xD;&#xA;&#xD;&#xA;            this.text = &quot;Windows Phone User Group&quot;;&#xD;&#xA;            this.logo = this.Game.Content.Load&lt;Texture2D&gt;(&quot;WP7Logos&quot;);&#xD;&#xA;&#xD;&#xA;            Viewport viewport = this.GraphicsDevice.Viewport;&#xD;&#xA;            Vector2 measureString = this.spriteFont.MeasureString(this.text);&#xD;&#xA;&#xD;&#xA;            this.textDrawPosition.X = (viewport.Width / 2f) - (measureString.X / 2f);&#xD;&#xA;            this.textDrawPosition.Y = (viewport.Height / 2f) - ((measureString.Y + this.logo.Height) / 2f);&#xD;&#xA;&#xD;&#xA;            this.logoDrawPosition.X = (viewport.Width / 2f) - (this.logo.Width / 2f);&#xD;&#xA;            this.logoDrawPosition.Y = (viewport.Height / 2f) - ((measureString.Y + this.logo.Height) / 2f) +&#xD;&#xA;                                      measureString.Y;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ae7d923c-f37c-47b0-92dd-dce41f7375c2" shortcut="wpug03CenteredStuffOrientationChange" description="" text="namespace RedBadger.Wpug&#xD;&#xA;{&#xD;&#xA;    using System;&#xD;&#xA;&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    public class CenteredText : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private Texture2D logo;&#xD;&#xA;&#xD;&#xA;        private Vector2 logoDrawPosition;&#xD;&#xA;&#xD;&#xA;        private SpriteBatch spriteBatch;&#xD;&#xA;&#xD;&#xA;        private SpriteFont spriteFont;&#xD;&#xA;&#xD;&#xA;        private string text;&#xD;&#xA;&#xD;&#xA;        private Vector2 textDrawPosition;&#xD;&#xA;&#xD;&#xA;        public CenteredText(Game game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.DrawString(this.spriteFont, this.text, this.textDrawPosition, Color.Black);&#xD;&#xA;            this.spriteBatch.Draw(this.logo, this.logoDrawPosition, Color.White);&#xD;&#xA;&#xD;&#xA;            this.spriteBatch.End();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            this.spriteBatch = new SpriteBatch(this.GraphicsDevice);&#xD;&#xA;            this.spriteFont = this.Game.Content.Load&lt;SpriteFont&gt;(&quot;SpriteFont&quot;);&#xD;&#xA;&#xD;&#xA;            this.text = &quot;Windows Phone User Group&quot;;&#xD;&#xA;            this.logo = this.Game.Content.Load&lt;Texture2D&gt;(&quot;WP7Logos&quot;);&#xD;&#xA;&#xD;&#xA;            this.CalculateLayout();&#xD;&#xA;            this.Game.Window.OrientationChanged += this.OnOrientationChanged;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void CalculateLayout()&#xD;&#xA;        {&#xD;&#xA;            Viewport viewport = this.GraphicsDevice.Viewport;&#xD;&#xA;            Vector2 measureString = this.spriteFont.MeasureString(this.text);&#xD;&#xA;&#xD;&#xA;            this.textDrawPosition.X = (viewport.Width / 2f) - (measureString.X / 2f);&#xD;&#xA;            this.textDrawPosition.Y = (viewport.Height / 2f) - ((measureString.Y + this.logo.Height) / 2f);&#xD;&#xA;&#xD;&#xA;            this.logoDrawPosition.X = (viewport.Width / 2f) - (this.logo.Width / 2f);&#xD;&#xA;            this.logoDrawPosition.Y = (viewport.Height / 2f) - ((measureString.Y + this.logo.Height) / 2f) +&#xD;&#xA;                                      measureString.Y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void OnOrientationChanged(object sender, EventArgs eventArgs)&#xD;&#xA;        {&#xD;&#xA;            this.CalculateLayout();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="2b92880e-6e38-41aa-87dc-1f16ac800c9e" shortcut="wpug04CenteredTextWithXPF" description="" text="namespace RedBadger.Wpug&#xD;&#xA;{&#xD;&#xA;    using System;&#xD;&#xA;&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    using RedBadger.Xpf;&#xD;&#xA;    using RedBadger.Xpf.Adapters.Xna.Graphics;&#xD;&#xA;    using RedBadger.Xpf.Controls;&#xD;&#xA;    using RedBadger.Xpf.Media;&#xD;&#xA;    using RedBadger.Xpf.Media.Imaging;&#xD;&#xA;&#xD;&#xA;    public class CenteredText : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private RootElement rootElement;&#xD;&#xA;&#xD;&#xA;        public CenteredText(Game game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Update(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Update();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Draw();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            var spriteBatchAdapter = new SpriteBatchAdapter(new SpriteBatch(this.GraphicsDevice));&#xD;&#xA;            var spriteFontAdapter = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;SpriteFont&quot;));&#xD;&#xA;&#xD;&#xA;            var renderer = new Renderer(spriteBatchAdapter, new PrimitivesService(this.GraphicsDevice));&#xD;&#xA;&#xD;&#xA;            this.rootElement = new RootElement(this.GraphicsDevice.Viewport.ToRect(), renderer);&#xD;&#xA;&#xD;&#xA;            var logo = new TextureImage(new Texture2DAdapter(this.Game.Content.Load&lt;Texture2D&gt;(&quot;WP7Logos&quot;)));&#xD;&#xA;            var stackPanel = new StackPanel&#xD;&#xA;                {&#xD;&#xA;                    Children =&#xD;&#xA;                        {&#xD;&#xA;                            new TextBlock(spriteFontAdapter) { Text = &quot;Windows Phone User Group&quot; },&#xD;&#xA;                            new Image { Source = logo, Stretch = Stretch.None }&#xD;&#xA;                        }&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            this.rootElement.Content = stackPanel;&#xD;&#xA;&#xD;&#xA;            this.Game.Window.OrientationChanged += this.OnOrientationChanged;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private void OnOrientationChanged(object sender, EventArgs eventArgs)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Viewport = this.GraphicsDevice.Viewport.ToRect();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="d75d8295-c4b7-4451-b492-fbe016305a06" shortcut="wpug05ScoreboardView" description="" text="namespace RedBadger.Wpug.Basketball&#xD;&#xA;{&#xD;&#xA;    using System;&#xD;&#xA;&#xD;&#xA;    using Microsoft.Phone.Reactive;&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    using RedBadger.Xpf;&#xD;&#xA;    using RedBadger.Xpf.Adapters.Xna.Graphics;&#xD;&#xA;    using RedBadger.Xpf.Controls;&#xD;&#xA;    using RedBadger.Xpf.Media;&#xD;&#xA;&#xD;&#xA;    public class ScoreboardView : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private SpriteFontAdapter lcd;&#xD;&#xA;&#xD;&#xA;        private SpriteFontAdapter led;&#xD;&#xA;&#xD;&#xA;        private RootElement rootElement;&#xD;&#xA;&#xD;&#xA;        public ScoreboardView(BasketballGame game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Draw();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Update(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Update();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            var spriteBatchAdapter = new SpriteBatchAdapter(new SpriteBatch(this.GraphicsDevice));&#xD;&#xA;            var renderer = new Renderer(spriteBatchAdapter, new PrimitivesService(this.GraphicsDevice));&#xD;&#xA;            this.rootElement = new RootElement(this.GraphicsDevice.Viewport.ToRect(), renderer);&#xD;&#xA;&#xD;&#xA;            this.lcd = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;Lcd&quot;));&#xD;&#xA;            this.led = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;Led&quot;));&#xD;&#xA;&#xD;&#xA;            Observable.FromEvent&lt;EventArgs&gt;(&#xD;&#xA;                handler =&gt; this.Game.Window.OrientationChanged += handler, &#xD;&#xA;                handler =&gt; this.Game.Window.OrientationChanged -= handler).Subscribe(&#xD;&#xA;                    _ =&gt; this.rootElement.Viewport = this.Game.GraphicsDevice.Viewport.ToRect());&#xD;&#xA;&#xD;&#xA;            IElement homeTeamPanel = this.CreateTeamDisplay();&#xD;&#xA;&#xD;&#xA;            var clockPanel = new StackPanel&#xD;&#xA;                {&#xD;&#xA;                    Children =&#xD;&#xA;                        {&#xD;&#xA;                            new Border&#xD;&#xA;                                {&#xD;&#xA;                                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                                    BorderBrush = new SolidColorBrush(Colors.White), &#xD;&#xA;                                    BorderThickness = new Thickness(4), &#xD;&#xA;                                    Padding = new Thickness(10), &#xD;&#xA;                                    Margin = new Thickness(10), &#xD;&#xA;                                    Child =&#xD;&#xA;                                        new TextBlock(this.led)&#xD;&#xA;                                            {&#xD;&#xA;                                                Text = &quot;00:00&quot;, &#xD;&#xA;                                                Foreground = new SolidColorBrush(Colors.Red), &#xD;&#xA;                                                HorizontalAlignment = HorizontalAlignment.Center&#xD;&#xA;                                            }&#xD;&#xA;                                }, &#xD;&#xA;                            new StackPanel&#xD;&#xA;                                {&#xD;&#xA;                                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                                    Orientation = Orientation.Horizontal, &#xD;&#xA;                                    Children =&#xD;&#xA;                                        {&#xD;&#xA;                                            new TextBlock(this.lcd)&#xD;&#xA;                                                {&#xD;&#xA;                                                    Text = &quot;PERIOD&quot;, &#xD;&#xA;                                                    Foreground = new SolidColorBrush(Colors.LightGray), &#xD;&#xA;                                                    Padding = new Thickness(10), &#xD;&#xA;                                                    VerticalAlignment = VerticalAlignment.Center&#xD;&#xA;                                                }, &#xD;&#xA;                                            new TextBlock(this.led)&#xD;&#xA;                                                {&#xD;&#xA;                                                    Text = &quot;0&quot;, &#xD;&#xA;                                                    Foreground = new SolidColorBrush(Colors.Yellow), &#xD;&#xA;                                                    Padding = new Thickness(10), &#xD;&#xA;                                                    VerticalAlignment = VerticalAlignment.Center&#xD;&#xA;                                                }&#xD;&#xA;                                        }&#xD;&#xA;                                }&#xD;&#xA;                        }&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            IElement guestTeamPanel = this.CreateTeamDisplay();&#xD;&#xA;&#xD;&#xA;            var grid = new Grid&#xD;&#xA;                {&#xD;&#xA;                    Background = new SolidColorBrush(Colors.Black), &#xD;&#xA;                    ColumnDefinitions =&#xD;&#xA;                        {&#xD;&#xA;                            new ColumnDefinition { Width = GridLength.Auto }, &#xD;&#xA;                            new ColumnDefinition(), &#xD;&#xA;                            new ColumnDefinition { Width = GridLength.Auto }&#xD;&#xA;                        }, &#xD;&#xA;                    Children = {&#xD;&#xA;                                  homeTeamPanel, clockPanel, guestTeamPanel &#xD;&#xA;                               }&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            Grid.SetColumn(homeTeamPanel, 0);&#xD;&#xA;            Grid.SetColumn(clockPanel, 1);&#xD;&#xA;            Grid.SetColumn(guestTeamPanel, 2);&#xD;&#xA;            var border = new Border&#xD;&#xA;                {&#xD;&#xA;                    VerticalAlignment = VerticalAlignment.Top, &#xD;&#xA;                    BorderBrush = new SolidColorBrush(Colors.LightGray), &#xD;&#xA;                    BorderThickness = new Thickness(5), &#xD;&#xA;                    Child = grid, &#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            this.rootElement.Content = border;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private IElement CreateTeamDisplay()&#xD;&#xA;        {&#xD;&#xA;            var teamNameTextBlock = new TextBlock(this.lcd)&#xD;&#xA;                {&#xD;&#xA;                    Text = &quot;Team&quot;, &#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.LightGray), &#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                    Padding = new Thickness(25)&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            var scoreTextBlock = new TextBlock(this.led)&#xD;&#xA;                {&#xD;&#xA;                    Text = &quot;0&quot;, &#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.Green), &#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            return new StackPanel { Children = { teamNameTextBlock, scoreTextBlock } };&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="71191947-9eb1-4eca-b4cb-d5f7d8366801" shortcut="wpug06ScoreboardWithButtons" description="" text="namespace RedBadger.Wpug.Basketball&#xD;&#xA;{&#xD;&#xA;    using System;&#xD;&#xA;&#xD;&#xA;    using Microsoft.Phone.Reactive;&#xD;&#xA;    using Microsoft.Xna.Framework;&#xD;&#xA;    using Microsoft.Xna.Framework.Graphics;&#xD;&#xA;&#xD;&#xA;    using RedBadger.Wpug.Basketball.Domain;&#xD;&#xA;    using RedBadger.Xpf;&#xD;&#xA;    using RedBadger.Xpf.Adapters.Xna.Graphics;&#xD;&#xA;    using RedBadger.Xpf.Adapters.Xna.Input;&#xD;&#xA;    using RedBadger.Xpf.Controls;&#xD;&#xA;    using RedBadger.Xpf.Data;&#xD;&#xA;    using RedBadger.Xpf.Media;&#xD;&#xA;&#xD;&#xA;    public class ScoreboardView : DrawableGameComponent&#xD;&#xA;    {&#xD;&#xA;        private SpriteFontAdapter basicFont;&#xD;&#xA;&#xD;&#xA;        private SpriteFontAdapter lcd;&#xD;&#xA;&#xD;&#xA;        private SpriteFontAdapter led;&#xD;&#xA;&#xD;&#xA;        private RootElement rootElement;&#xD;&#xA;&#xD;&#xA;        public ScoreboardView(BasketballGame game)&#xD;&#xA;            : base(game)&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Draw(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Draw();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public override void Update(GameTime gameTime)&#xD;&#xA;        {&#xD;&#xA;            this.rootElement.Update();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        protected override void LoadContent()&#xD;&#xA;        {&#xD;&#xA;            var spriteBatchAdapter = new SpriteBatchAdapter(new SpriteBatch(this.GraphicsDevice));&#xD;&#xA;            var renderer = new Renderer(spriteBatchAdapter, new PrimitivesService(this.GraphicsDevice));&#xD;&#xA;            this.rootElement = new RootElement(this.GraphicsDevice.Viewport.ToRect(), renderer, new InputManager());&#xD;&#xA;&#xD;&#xA;            this.lcd = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;Lcd&quot;));&#xD;&#xA;            this.led = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;Led&quot;));&#xD;&#xA;&#xD;&#xA;            this.basicFont = new SpriteFontAdapter(this.Game.Content.Load&lt;SpriteFont&gt;(&quot;BasicSpriteFont&quot;));&#xD;&#xA;&#xD;&#xA;            Observable.FromEvent&lt;EventArgs&gt;(&#xD;&#xA;                handler =&gt; this.Game.Window.OrientationChanged += handler, &#xD;&#xA;                handler =&gt; this.Game.Window.OrientationChanged -= handler).Subscribe(&#xD;&#xA;                    _ =&gt; this.rootElement.Viewport = this.Game.GraphicsDevice.Viewport.ToRect());&#xD;&#xA;&#xD;&#xA;            var timeTextBlock = new TextBlock(this.led)&#xD;&#xA;                {&#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.Red), HorizontalAlignment = HorizontalAlignment.Center &#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            var clock = new Clock();&#xD;&#xA;            var homeTeam = new Team(&quot;HOME&quot;);&#xD;&#xA;            var guestTeam = new Team(&quot;GUEST&quot;);&#xD;&#xA;&#xD;&#xA;            timeTextBlock.Bind(TextBlock.TextProperty, clock.TimeDisplay);&#xD;&#xA;&#xD;&#xA;            var periodTextBlock = new TextBlock(this.led)&#xD;&#xA;                {&#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.Yellow), &#xD;&#xA;                    Padding = new Thickness(10), &#xD;&#xA;                    VerticalAlignment = VerticalAlignment.Center&#xD;&#xA;                };&#xD;&#xA;            periodTextBlock.Bind(&#xD;&#xA;                TextBlock.TextProperty, BindingFactory.CreateOneWay&lt;Clock, int, string&gt;(clock, c =&gt; c.Period));&#xD;&#xA;&#xD;&#xA;            IElement homeTeamPanel = this.CreateTeamDisplay(homeTeam);&#xD;&#xA;&#xD;&#xA;            var clockPanel = new StackPanel&#xD;&#xA;                {&#xD;&#xA;                    Children =&#xD;&#xA;                        {&#xD;&#xA;                            new Border&#xD;&#xA;                                {&#xD;&#xA;                                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                                    BorderBrush = new SolidColorBrush(Colors.White), &#xD;&#xA;                                    BorderThickness = new Thickness(4), &#xD;&#xA;                                    Padding = new Thickness(10), &#xD;&#xA;                                    Margin = new Thickness(10), &#xD;&#xA;                                    Child = timeTextBlock&#xD;&#xA;                                }, &#xD;&#xA;                            new StackPanel&#xD;&#xA;                                {&#xD;&#xA;                                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                                    Orientation = Orientation.Horizontal, &#xD;&#xA;                                    Children =&#xD;&#xA;                                        {&#xD;&#xA;                                            new TextBlock(this.lcd)&#xD;&#xA;                                                {&#xD;&#xA;                                                    Text = &quot;PERIOD&quot;,&#xD;&#xA;                                                    Foreground = new SolidColorBrush(Colors.LightGray), &#xD;&#xA;                                                    Padding = new Thickness(10),&#xD;&#xA;                                                    VerticalAlignment = VerticalAlignment.Center&#xD;&#xA;                                                }, &#xD;&#xA;                                            periodTextBlock&#xD;&#xA;                                        }&#xD;&#xA;                                }&#xD;&#xA;                        }&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            IElement guestTeamPanel = this.CreateTeamDisplay(guestTeam);&#xD;&#xA;&#xD;&#xA;            var grid = new Grid&#xD;&#xA;                {&#xD;&#xA;                    Background = new SolidColorBrush(Colors.Black), &#xD;&#xA;                    ColumnDefinitions =&#xD;&#xA;                        {&#xD;&#xA;                            new ColumnDefinition { Width = GridLength.Auto }, &#xD;&#xA;                            new ColumnDefinition(), &#xD;&#xA;                            new ColumnDefinition { Width = GridLength.Auto }&#xD;&#xA;                        }, &#xD;&#xA;                    RowDefinitions =&#xD;&#xA;                        {&#xD;&#xA;                            new RowDefinition { Height = GridLength.Auto },&#xD;&#xA;                            new RowDefinition { Height = GridLength.Auto } &#xD;&#xA;                        }, &#xD;&#xA;                    Children = {&#xD;&#xA;                                   homeTeamPanel, clockPanel, guestTeamPanel &#xD;&#xA;                               }&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            Grid.SetColumn(homeTeamPanel, 0);&#xD;&#xA;            Grid.SetColumn(clockPanel, 1);&#xD;&#xA;            Grid.SetColumn(guestTeamPanel, 2);&#xD;&#xA;            var border = new Border&#xD;&#xA;                {&#xD;&#xA;                    VerticalAlignment = VerticalAlignment.Top,&#xD;&#xA;                    BorderBrush = new SolidColorBrush(Colors.LightGray),&#xD;&#xA;                    BorderThickness = new Thickness(5),&#xD;&#xA;                    Child = grid,&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            var homeButton = new Button&#xD;&#xA;                {&#xD;&#xA;                    Content =&#xD;&#xA;                        new Border&#xD;&#xA;                            {&#xD;&#xA;                                Background = new SolidColorBrush(Colors.Gray), &#xD;&#xA;                                Child = new TextBlock(this.basicFont) { Text = &quot;Home Score&quot; }, &#xD;&#xA;                            }, &#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                    VerticalAlignment = VerticalAlignment.Center, &#xD;&#xA;                    Padding = new Thickness(10)&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            homeButton.Click += (sender, args) =&gt; homeTeam.IncrementScore(1);&#xD;&#xA;            grid.Children.Add(homeButton);&#xD;&#xA;            Grid.SetRow(homeButton, 1);&#xD;&#xA;&#xD;&#xA;            var guestButton = new Button&#xD;&#xA;                {&#xD;&#xA;                    Content =&#xD;&#xA;                        new Border&#xD;&#xA;                            {&#xD;&#xA;                                Background = new SolidColorBrush(Colors.Gray), &#xD;&#xA;                                Child = new TextBlock(this.basicFont) { Text = &quot;Guest Score&quot; }, &#xD;&#xA;                            }, &#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center, &#xD;&#xA;                    VerticalAlignment = VerticalAlignment.Center, &#xD;&#xA;                    Padding = new Thickness(10)&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            guestButton.Click += (sender, args) =&gt; guestTeam.IncrementScore(1);&#xD;&#xA;            grid.Children.Add(guestButton);&#xD;&#xA;            Grid.SetRow(guestButton, 1);&#xD;&#xA;            Grid.SetColumn(guestButton, 2);&#xD;&#xA;&#xD;&#xA;            this.rootElement.Content = border;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        private IElement CreateTeamDisplay(Team team)&#xD;&#xA;        {&#xD;&#xA;            var teamNameTextBlock = new TextBlock(this.lcd)&#xD;&#xA;                {&#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.LightGray),&#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center,&#xD;&#xA;                    Padding = new Thickness(25)&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            var scoreTextBlock = new TextBlock(this.led)&#xD;&#xA;                {&#xD;&#xA;                    Foreground = new SolidColorBrush(Colors.Green),&#xD;&#xA;                    HorizontalAlignment = HorizontalAlignment.Center&#xD;&#xA;                };&#xD;&#xA;&#xD;&#xA;            teamNameTextBlock.Bind(TextBlock.TextProperty, BindingFactory.CreateOneWay&lt;Team, string&gt;(o =&gt; o.Name));&#xD;&#xA;            scoreTextBlock.Bind(TextBlock.TextProperty, BindingFactory.CreateOneWay&lt;Team, int, string&gt;(o =&gt; o.Score));&#xD;&#xA;&#xD;&#xA;            return new StackPanel { Children = { teamNameTextBlock, scoreTextBlock }, DataContext = team };&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}" reformat="False" shortenQualifiedReferences="False">
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
</TemplatesExport>