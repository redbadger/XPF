#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------
#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.SizeSpecs
{
    using System;

    using Machine.Specifications;

    using RedBadger.Xpf.Internal;

    [Subject(typeof(Size))]
    public class requesting_an_empty_size
    {
        private static Size size;

        private Because of = () => size = Size.Empty;

        private It should_report_that_it_is_empty = () => size.IsEmpty.ShouldBeTrue();

        private It should_return_an_instance_with_negative_infinity_values = () =>
            {
                size.Width.ShouldEqual(Double.NegativeInfinity);
                size.Height.ShouldEqual(Double.NegativeInfinity);
            };
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_added_to_another_size_using_a_addition_operator
    {
        private static Size resultSize;

        private static Size size1;

        private static Size size2;

        private Establish context = () =>
            {
                size1 = new Size(10, 20);
                size2 = new Size(100, 200);
            };

        private Because of = () => resultSize = size1 + size2;

        private It should_result_in_a_sum_of_the_2_sizes = () => resultSize.ShouldEqual(new Size(110, 220));
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_subtracted_from_another_size_using_a_subtraction_operator
    {
        private static Size resultSize;

        private static Size size1;

        private static Size size2;

        private Establish context = () =>
            {
                size1 = new Size(10, 20);
                size2 = new Size(100, 200);
            };

        private Because of = () => resultSize = size2 - size1;

        private It should_result_in_a_difference_of_the_2_sizes = () => resultSize.ShouldEqual(new Size(90, 180));
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_cast_to_a_vector
    {
        private static Size size;

        private static Vector vector;

        private Establish context = () => { size = new Size(10, 20); };

        private Because of = () => vector = (Vector)size;

        private It should_result_in_an_equivalent_vector = () => vector.ShouldEqual(new Vector(10, 20));
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_cast_to_a_point
    {
        private static Point point;

        private static Size size;

        private Establish context = () => { size = new Size(10, 20); };

        private Because of = () => point = (Point)size;

        private It should_result_in_an_equivalent_vector = () => point.ShouldEqual(new Point(10, 20));
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_deflated_by_a_thickness
    {
        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private static Size result;

        private static Size subject;

        private Establish context = () => subject = new Size(10, 20);

        private Because of = () => result = subject.Deflate(thickness);

        private It should_reduce_the_size_by_the_correct_amount = () => result.ShouldEqual(new Size(6, 14));
    }

    [Subject(typeof(Size))]
    public class when_a_size_is_inflated_by_a_thickness
    {
        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private static Size result;

        private static Size subject;

        private Establish context = () => subject = new Size(10, 20);

        private Because of = () => result = subject.Inflate(thickness);

        private It should_reduce_the_size_by_the_correct_amount = () => result.ShouldEqual(new Size(14, 26));
    }
}
