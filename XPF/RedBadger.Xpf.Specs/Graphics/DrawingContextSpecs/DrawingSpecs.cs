#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Graphics.DrawingContextSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;
    using RedBadger.Xpf.Media.Imaging;

    using It = Machine.Specifications.It;

    [Subject(typeof(DrawingContext), "Text")]
    public class when_drawing_text : a_DrawingContext
    {
        private const string ExpectedString = "String Value";

        private static readonly Color expectedColor = Colors.Black;

        private static readonly Point expectedDrawPosition;

        private Because of = () =>
            {
                DrawingContext.DrawText(
                    SpriteFont.Object, ExpectedString, expectedDrawPosition, new SolidColorBrush(expectedColor));
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_text =
            () =>
            SpriteBatch.Verify(
                batch => batch.DrawString(SpriteFont.Object, ExpectedString, expectedDrawPosition, expectedColor));
    }

    [Subject(typeof(DrawingContext), "Rectangle")]
    public class when_drawing_a_rectangle : a_DrawingContext
    {
        private static readonly SolidColorBrush expectedBrush = new SolidColorBrush(Colors.Blue);

        private static readonly Rect expectedRect = new Rect(10, 20, 30, 40);

        private Because of = () =>
            {
                DrawingContext.DrawRectangle(expectedRect, expectedBrush);
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_a_rectangle =
            () => SpriteBatch.Verify(batch => batch.Draw(Moq.It.IsAny<ITexture>(), expectedRect, expectedBrush.Color));
    }

    [Subject(typeof(DrawingContext), "Image")]
    public class when_drawing_an_image : a_DrawingContext
    {
        private static readonly SolidColorBrush expectedColor = new SolidColorBrush(Colors.White);

        private static readonly Rect expectedRect = new Rect(10, 20, 30, 40);

        private static Mock<ITexture> expectedTexture;

        private Because of = () =>
            {
                expectedTexture = new Mock<ITexture>();
                DrawingContext.DrawImage(new Mock<TextureImage>(expectedTexture.Object).Object, expectedRect);
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_an_image =
            () => SpriteBatch.Verify(batch => batch.Draw(expectedTexture.Object, expectedRect, expectedColor.Color));
    }

/*    [Subject(typeof(DrawingContext), "Rectangle")]
    public class when_resolving_offsets_for_a_rectangle : a_DrawingContext
    {
        private static readonly Vector absoluteOffset = new Vector(20, 30);

        private static readonly Rect rect = new Rect(10, 20, 30, 40);

        private Establish conetxt =
            () => UiElement.Setup(element => element.CalculateAbsoluteOffset()).Returns(absoluteOffset);

        private Because of = () =>
            {
                DrawingContext.DrawRectangle(rect, new SolidColorBrush(Colors.Blue));
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_with_the_correct_offset =
            () =>
            SpriteBatch.Verify(
                batch =>
                batch.Draw(
                    Moq.It.IsAny<ITexture>(), 
                    new Rect(absoluteOffset.X + rect.X, absoluteOffset.Y + rect.Y, rect.Width, rect.Height), 
                    Moq.It.IsAny<Color>()));
    }

    [Subject(typeof(DrawingContext), "Text")]
    public class when_resolving_offsets_for_text : a_DrawingContext
    {
        private static readonly Vector absoluteOffset = new Vector(20, 30);

        private static readonly Point textPosition = new Point(10, 20);

        private Establish context =
            () => UiElement.Setup(element => element.CalculateAbsoluteOffset()).Returns(absoluteOffset);

        private Because of = () =>
            {
                DrawingContext.DrawText(SpriteFont.Object, string.Empty, textPosition, new SolidColorBrush(Colors.Blue));
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_with_the_correct_offset =
            () =>
            SpriteBatch.Verify(
                batch =>
                batch.DrawString(
                    Moq.It.IsAny<ISpriteFont>(), 
                    Moq.It.IsAny<string>(), 
                    textPosition + absoluteOffset, 
                    Moq.It.IsAny<Color>()));
    }

    [Subject(typeof(DrawingContext), "Image")]
    public class when_resolving_offsets_for_an_image : a_DrawingContext
    {
        private static readonly Vector absoluteOffset = new Vector(20, 30);

        private static readonly Rect rect = new Rect(10, 20, 30, 40);

        private Establish context =
            () => UiElement.Setup(element => element.CalculateAbsoluteOffset()).Returns(absoluteOffset);

        private Because of = () =>
            {
                DrawingContext.DrawImage(new Mock<TextureImage>(new Mock<ITexture>().Object).Object, rect);
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_render_with_the_correct_offset =
            () =>
            SpriteBatch.Verify(
                batch =>
                batch.Draw(
                    Moq.It.IsAny<ITexture>(), 
                    new Rect(absoluteOffset.X + rect.X, absoluteOffset.Y + rect.Y, rect.Width, rect.Height), 
                    Moq.It.IsAny<Color>()));
    }

    [Subject(typeof(DrawingContext), "PreDraw")]
    public class when_resolving_offsets_at_the_origin : a_DrawingContext
    {
        private static readonly Vector absoluteOffset1 = new Vector(20, 30);

        private static readonly Vector absoluteOffset2 = Vector.Zero;

        private static readonly Rect rect = new Rect(0, 0, 30, 40);

        private static bool isFirst;

        private Establish context = () =>
            {
                isFirst = true;

                UiElement.Setup(element => element.CalculateAbsoluteOffset()).Returns(
                    () =>
                        {
                            Vector absoluteOffset = isFirst ? absoluteOffset1 : absoluteOffset2;
                            isFirst = false;
                            return absoluteOffset;
                        });
            };

        private Because of = () =>
            {
                DrawingContext.DrawRectangle(rect, new SolidColorBrush(Colors.Blue));
                Renderer.PreDraw();

                // Call GetDrawingContext again on *another* element - this forces PreDraw to reoccur,
                // but does not clear the DrawingContext of the element we want to re-evaluate on the 2nd PreDraw.
                Renderer.GetDrawingContext(new Mock<IElement>().Object);
                Renderer.PreDraw();

                Renderer.Draw();
            };

        private It should_render_at_the_origin =
            () =>
            SpriteBatch.Verify(
                batch =>
                batch.Draw(
                    Moq.It.IsAny<ITexture>(), 
                    new Rect(absoluteOffset2.X + rect.X, absoluteOffset2.Y + rect.Y, rect.Width, rect.Height), 
                    Moq.It.IsAny<Color>()));
    }*/
}
