#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Graphics.RendererSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;

    using It = Machine.Specifications.It;

    [Subject(typeof(Renderer))]
    public class when_the_same_element_requests_a_drawing_context_more_than_once : a_Renderer
    {
        private static Mock<IElement> element;

        private Establish context = () => { element = new Mock<IElement>(); };

        private Because of = () =>
            {
                Renderer.GetDrawingContext(element.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
                Renderer.GetDrawingContext(element.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_only_draw_the_element_once =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), Times.Once());
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_an_invalid_context_after_clearing : a_Renderer
    {
        private static Mock<IElement> element;

        private Establish context = () =>
            {
                element = new Mock<IElement> { CallBase = true };
                Renderer.GetDrawingContext(element.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
            };

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.Draw();
            };

        private It should_not_draw_anything =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_a_valid_context_after_clearing : a_Renderer
    {
        private static Mock<IElement> mock;

        private Establish context = () =>
            {
                mock = new Mock<IElement> { CallBase = true };
                mock.SetupGet(element => element.IsArrangeValid).Returns(true);
                mock.SetupGet(element => element.VisualParent).Returns(new Mock<IElement>().Object);
                Renderer.GetDrawingContext(mock.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
            };

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.PreDraw();
                Renderer.Draw();
            };

        private It should_still_draw =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()));
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_an_orphaned_element : a_Renderer
    {
        private static Mock<IElement> mock;

        private Establish context = () =>
            {
                mock = new Mock<IElement> { CallBase = true };
                mock.SetupGet(element => element.IsArrangeValid).Returns(true);
                mock.SetupGet(element => element.VisualParent).Returns(default(IElement));
                Renderer.GetDrawingContext(mock.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
            };

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.Draw();
            };

        private It should_not_draw_the_orphaned_element =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Renderer))]
    public class when_an_element_is_inserted_into_an_existing_tree : a_Renderer
    {
        private static int blueCallOrder;

        private static int greenCallOrder;

        private static int i;

        private static int redCallOrder;

        private static RootElement rootElement;

        private static StackPanel stackPanel;

        private Establish context = () =>
            {
                rootElement = new RootElement(Rect.Empty, Renderer);

                stackPanel = new StackPanel
                    {
                        Children =
                            {
                                new Border { Background = new SolidColorBrush(Colors.Red) }, 
                                new Border { Background = new SolidColorBrush(Colors.Green) }
                            }
                    };

                rootElement.Content = stackPanel;
                rootElement.Update();
                rootElement.Draw();

                SpriteBatch.Setup(
                    batch =>
                    batch.Draw(
                        Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.Is<Color>(value => value == Colors.Red)))
                    .Callback(() => redCallOrder = i++);

                SpriteBatch.Setup(
                    batch =>
                    batch.Draw(
                        Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.Is<Color>(value => value == Colors.Green)))
                    .Callback(() => greenCallOrder = i++);

                SpriteBatch.Setup(
                    batch =>
                    batch.Draw(
                        Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.Is<Color>(value => value == Colors.Blue)))
                    .Callback(() => blueCallOrder = i++);
            };

        private Because of = () =>
            {
                stackPanel.Children.Insert(1, new Border { Background = new SolidColorBrush(Colors.Blue) });
                rootElement.Update();
                rootElement.Draw();
            };

        private It should_1_draw_the_first_child_first = () => redCallOrder.ShouldEqual(0);

        private It should_2_draw_the_second_child_second = () => blueCallOrder.ShouldEqual(1);

        private It should_3_draw_the_third_child_third = () => greenCallOrder.ShouldEqual(2);
    }

    [Subject(typeof(Renderer))]
    public class when_an_element_replaces_an_existing_element_in_an_existing_tree : a_Renderer
    {
        private static ContentControl contentControl;

        private static Border firstBorder;

        private static RootElement rootElement;

        private static Border secondBorder;

        private Establish context = () =>
            {
                rootElement = new RootElement(new Rect(0, 0, 300, 300), Renderer);
                firstBorder = new Border();
                secondBorder = new Border();

                contentControl = new ContentControl { Width = 10, Height = 10, Content = firstBorder };
                rootElement.Content = contentControl;
                rootElement.Update();
                rootElement.Draw();
            };

        private Because of = () =>
            {
                contentControl.Content = secondBorder;
                rootElement.Update();
                rootElement.Draw();
            };

        private It should_calculate_the_correct_absolute_offset_for_the_second_element =
            () =>
            ((DrawingContext)Renderer.GetDrawingContext(secondBorder)).AbsoluteOffset.ShouldEqual(new Vector(145, 145));
    }

    [Subject(typeof(Renderer))]
    public class when_there_is_nothing_to_draw : a_Renderer
    {
        private static RootElement rootElement;

        private Establish context = () => rootElement = new RootElement(Rect.Empty, Renderer);

        private Because of = () => rootElement.Draw();

        private It should_not_call_ISpriteBatch_End = () => SpriteBatch.Verify(batch => batch.End(), Times.Never());
    }
}
