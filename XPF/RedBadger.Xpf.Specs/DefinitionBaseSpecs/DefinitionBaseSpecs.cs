#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.DefinitionBaseSpecs
{
    using Machine.Specifications;

    using RedBadger.Xpf.Controls;

    [Subject(typeof(DefinitionBase))]
    public class when_a_default_column_definition_is_initialized
    {
        private static ColumnDefinition columnDefinition;

        private Because of = () => columnDefinition = new ColumnDefinition();

        private It should_have_a_width_with_a_grid_type_of_star =
            () => columnDefinition.Width.GridUnitType.ShouldEqual(GridUnitType.Star);
    }

    [Subject(typeof(DefinitionBase))]
    public class when_a_default_row_definition_is_initialized
    {
        private static RowDefinition rowDefinition;

        private Because of = () => rowDefinition = new RowDefinition();

        private It should_have_a_height_with_a_grid_type_of_star =
            () => rowDefinition.Height.GridUnitType.ShouldEqual(GridUnitType.Star);
    }

    [Subject(typeof(DefinitionBase))]
    public class when_a_pixel_column_definition_is_initialized
    {
        private const GridUnitType ExpectedGridUnitType = GridUnitType.Pixel;

        private const double ExpectedMaxWidth = 100;

        private const double ExpectedMinWidth = 10;

        private const double ExpectedWidth = 10;

        private static ColumnDefinition columnDefinition;

        private Because of =
            () =>
            columnDefinition =
            new ColumnDefinition
                {
                    Width = new GridLength(ExpectedWidth, ExpectedGridUnitType), 
                    MinWidth = ExpectedMinWidth, 
                    MaxWidth = ExpectedMaxWidth
                };

        private It should_return_column_max_width_when_user_max_length_is_requested =
            () => columnDefinition.UserMaxLength.ShouldEqual(ExpectedMaxWidth);

        private It should_return_column_min_width_when_user_min_length_is_requested =
            () => columnDefinition.UserMinLength.ShouldEqual(ExpectedMinWidth);

        private It should_return_column_width_when_user_length_is_requested =
            () => columnDefinition.UserLength.Value.ShouldEqual(ExpectedWidth);

        private It should_return_the_columns_unit_type_when_user_length_is_requested =
            () => columnDefinition.UserLength.GridUnitType.ShouldEqual(ExpectedGridUnitType);
    }

    [Subject(typeof(DefinitionBase))]
    public class when_a_pixel_row_definition_is_initialized
    {
        private const GridUnitType ExpectedGridUnitType = GridUnitType.Pixel;

        private const double ExpectedHeight = 10;

        private const double ExpectedMaxHeight = 100;

        private const double ExpectedMinHeight = 10;

        private static RowDefinition rowDefinition;

        private Because of =
            () =>
            rowDefinition =
            new RowDefinition
                {
                    Height = new GridLength(ExpectedHeight, ExpectedGridUnitType), 
                    MinHeight = ExpectedMinHeight, 
                    MaxHeight = ExpectedMaxHeight
                };

        private It should_return_row_height_when_user_length_is_requested =
            () => rowDefinition.UserLength.Value.ShouldEqual(ExpectedHeight);

        private It should_return_row_max_height_when_user_max_length_is_requested =
            () => rowDefinition.UserMaxLength.ShouldEqual(ExpectedMaxHeight);

        private It should_return_row_min_height_when_user_min_length_is_requested =
            () => rowDefinition.UserMinLength.ShouldEqual(ExpectedMinHeight);

        private It should_return_the_rows_unit_type_when_user_length_is_requested =
            () => rowDefinition.UserLength.GridUnitType.ShouldEqual(ExpectedGridUnitType);
    }
}
