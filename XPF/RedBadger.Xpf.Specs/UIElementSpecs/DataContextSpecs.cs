#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.UIElementSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Data;

    using It = Machine.Specifications.It;

    public abstract class a_UIElement_Hierarchy
    {
        protected static Mock<UIElement> deepestChild;

        protected static ContentControl middleChild;

        protected static ContentControl parent;

        private Establish context = () =>
            {
                deepestChild = new Mock<UIElement> { CallBase = true };
                middleChild = new ContentControl { Content = deepestChild.Object };
                parent = new ContentControl { Content = middleChild };
            };
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_data_context_is_changed_on_an_element_with_children : a_UIElement_Hierarchy
    {
        private Establish context = () => parent.Measure(Size.Empty);

        private Because of = () => parent.DataContext = new object();

        private It should_invalidate_measure_on_the_deepest_child =
            () => deepestChild.Object.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_data_context_is_changed_on_an_element_with_children_that_have_their_own_data_context :
        a_UIElement_Hierarchy
    {
        private Establish context = () =>
            {
                middleChild.DataContext = new object();
                parent.Measure(Size.Empty);
            };

        private Because of = () => parent.DataContext = new object();

        private It should_not_invalidate_measure_on_children_that_have_access_to_an_exisiting_data_context =
            () => deepestChild.Object.IsMeasureValid.ShouldBeTrue();

        private It should_not_invalidate_measure_on_children_that_have_their_own_data_context =
            () => middleChild.IsMeasureValid.ShouldBeTrue();
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_binding_to_an_unset_data_context : a_UIElement_Hierarchy
    {
        private const double ExpectedDataContext = 10d;

        private Establish context = () => parent.DataContext = ExpectedDataContext;

        private Because of = () =>
            {
                deepestChild.Object.Bind(UIElement.WidthProperty, BindingFactory.CreateOneWay<double>());
                parent.Measure(Size.Empty);
            };

        private It should_search_up_the_visual_tree_to_find_a_valid_data_context =
            () => deepestChild.Object.Width.ShouldEqual(ExpectedDataContext);
    }
}
