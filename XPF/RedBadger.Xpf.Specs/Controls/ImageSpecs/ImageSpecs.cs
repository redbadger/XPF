#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ImageSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;
    using RedBadger.Xpf.Media.Imaging;

    using It = Machine.Specifications.It;

    public abstract class an_image
    {
        protected static Mock<IDrawingContext> DrawingContext;

        protected static Image Subject;

        protected static Mock<RootElement> RootElement;

        private static Mock<IRenderer> renderer;

        private Establish context = () =>
            {
                renderer = new Mock<IRenderer>();
                DrawingContext = new Mock<IDrawingContext>();
                renderer.Setup(r => r.GetDrawingContext(Moq.It.IsAny<IElement>())).Returns(DrawingContext.Object);
                RootElement = new Mock<RootElement>(new Rect(new Size(100, 100)), renderer.Object) { CallBase = true };
                Subject = new Image();
                RootElement.Object.Content = Subject;
            };
    }

    public abstract class a_smaller_Image
    {
        protected static readonly Size AvailableSize = new Size(9, 20);

        protected static readonly Size ImageSize = new Size(3, 4);

        protected static Image Image;

        protected static Mock<ITexture> Texture;

        private Establish context = () =>
            {
                Texture = new Mock<ITexture>();
                Texture.Setup(d => d.Width).Returns((int)ImageSize.Width);
                Texture.Setup(d => d.Height).Returns((int)ImageSize.Height);
                Image = new Image { Source = new TextureImage(Texture.Object) };
            };
    }

    public abstract class a_larger_Image
    {
        protected static readonly Size AvailableSize = new Size(6, 10);

        protected static readonly Size ImageSize = new Size(8, 20);

        protected static Image Image;

        protected static Mock<ITexture> Texture;

        private Establish context = () =>
            {
                Texture = new Mock<ITexture>();
                Texture.Setup(d => d.Width).Returns((int)ImageSize.Width);
                Texture.Setup(d => d.Height).Returns((int)ImageSize.Height);
                Image = new Image { Source = new TextureImage(Texture.Object) };
            };
    }

    public abstract class a_measured_and_arranged_Image : a_smaller_Image
    {
        private Establish context = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_not_stretch : a_smaller_Image
    {
        private Establish context = () => Image.Stretch = Stretch.None;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_that_of_the_image_source =
            () => Image.DesiredSize.ShouldEqual(ImageSize);

        private It should_have_a_render_size_equal_to_that_of_the_image_source =
            () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_stretch_value_of_Uniform : a_smaller_Image
    {
        private static readonly Size ExpectedSize = new Size(
            AvailableSize.Width, ImageSize.Height * (AvailableSize.Width / ImageSize.Width));

        private Establish context = () => Image.Stretch = Stretch.Uniform;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_the_correct_desired_size = () => Image.DesiredSize.ShouldEqual(ExpectedSize);

        private It should_have_the_correct_render_size = () => Image.RenderSize.ShouldEqual(ExpectedSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_stretch_value_of_Uniform_but_not_allowed_to_expand : a_smaller_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.Uniform;
                Image.StretchDirection = StretchDirection.DownOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_image_size = () => Image.DesiredSize.ShouldEqual(ImageSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_a_stretch_value_of_Fill : a_smaller_Image
    {
        private Establish context = () => Image.Stretch = Stretch.Fill;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_the_available_size =
            () => Image.RenderSize.ShouldEqual(AvailableSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_a_stretch_value_of_Fill_but_not_allowed_to_expand : a_smaller_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.Fill;
                Image.StretchDirection = StretchDirection.DownOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_image_size = () => Image.DesiredSize.ShouldEqual(ImageSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_a_stretch_value_of_UniformToFill : a_smaller_Image
    {
        private static readonly Size ExpectedRenderSize =
            new Size(ImageSize.Width * (AvailableSize.Height / ImageSize.Height), AvailableSize.Height);

        private Establish context = () => Image.Stretch = Stretch.UniformToFill;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_the_correct_render_size = () => Image.RenderSize.ShouldEqual(ExpectedRenderSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_smaller_image_is_set_to_a_stretch_value_of_UniformToFill_but_not_allowed_to_expand :
        a_smaller_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.UniformToFill;
                Image.StretchDirection = StretchDirection.DownOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_image_size = () => Image.DesiredSize.ShouldEqual(ImageSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_not_stretch : a_larger_Image
    {
        private Establish context = () => Image.Stretch = Stretch.None;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_that_of_the_image_source =
            () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_stretch_value_of_Uniform : a_larger_Image
    {
        private static readonly Size ExpectedSize = new Size(
            ImageSize.Width / (ImageSize.Height / AvailableSize.Height), AvailableSize.Height);

        private Establish context = () => Image.Stretch = Stretch.Uniform;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_the_correct_desired_size = () => Image.DesiredSize.ShouldEqual(ExpectedSize);

        private It should_have_the_correct_render_size = () => Image.RenderSize.ShouldEqual(ExpectedSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_stretch_value_of_Uniform_but_not_allowed_to_shrink : a_larger_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.Uniform;
                Image.StretchDirection = StretchDirection.UpOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_a_stretch_value_of_Fill : a_larger_Image
    {
        private Establish context = () => Image.Stretch = Stretch.Fill;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_the_available_size =
            () => Image.RenderSize.ShouldEqual(AvailableSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_a_stretch_value_of_Fill_but_not_allowed_to_shrink : a_larger_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.Fill;
                Image.StretchDirection = StretchDirection.UpOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_a_stretch_value_of_UniformToFill : a_larger_Image
    {
        private static readonly Size ExpectedRenderSize = new Size(
            AvailableSize.Width, ImageSize.Height * (AvailableSize.Width / ImageSize.Width));

        private Establish context = () => Image.Stretch = Stretch.UniformToFill;

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_the_correct_render_size = () => Image.RenderSize.ShouldEqual(ExpectedRenderSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_a_larger_image_is_set_to_a_stretch_value_of_UniformToFill_but_not_allowed_to_shrink :
        a_larger_Image
    {
        private Establish context = () =>
            {
                Image.Stretch = Stretch.UniformToFill;
                Image.StretchDirection = StretchDirection.UpOnly;
            };

        private Because of = () =>
            {
                Image.Measure(AvailableSize);
                Image.Arrange(new Rect(AvailableSize));
            };

        private It should_have_a_desired_size_equal_to_the_available_size =
            () => Image.DesiredSize.ShouldEqual(AvailableSize);

        private It should_have_a_render_size_equal_to_the_image_size = () => Image.RenderSize.ShouldEqual(ImageSize);
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_stretch_is_changed : a_measured_and_arranged_Image
    {
        private Because of = () => Image.Stretch = Stretch.UniformToFill;

        private It should_invalidate_arrange = () => Image.IsArrangeValid.ShouldBeFalse();

        private It should_invalidate_measure = () => Image.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_stretch_direction_is_changed : a_measured_and_arranged_Image
    {
        private Because of = () => Image.StretchDirection = StretchDirection.DownOnly;

        private It should_invalidate_arrange = () => Image.IsArrangeValid.ShouldBeFalse();

        private It should_invalidate_measure = () => Image.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_image_source_is_changed : a_measured_and_arranged_Image
    {
        private Because of = () => Image.Source = new TextureImage(new Mock<ITexture>().Object);

        private It should_invalidate_arrange = () => Image.IsArrangeValid.ShouldBeFalse();

        private It should_invalidate_measure = () => Image.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_an_image_source_is_specified : an_image
    {
        private static TextureImage imageSource;

        private Because of = () =>
            {
                imageSource = new TextureImage(new Mock<ITexture>().Object);
                Subject.Source = imageSource;
                RootElement.Object.Update();
                RootElement.Object.Draw();
            };

        private It should_render_the_image =
            () => DrawingContext.Verify(drawingContext => drawingContext.DrawImage(imageSource, Moq.It.IsAny<Rect>()));

        private It should_render_the_image_with_the_correct_size =
            () =>
            DrawingContext.Verify(
                drawingContext =>
                drawingContext.DrawImage(
                    Moq.It.IsAny<ImageSource>(), 
                    Moq.It.Is<Rect>(rect => rect.X == 0 && rect.Y == 0 && rect.Size == Subject.RenderSize)));
    }

    [Subject(typeof(Image), "Stretch")]
    public class when_an_image_source_is_not_specified : an_image
    {
        private Because of = () =>
        {
            RootElement.Object.Update();
            RootElement.Object.Draw();
        };

        private It should_not_occupy_any_space = () => Subject.RenderSize.ShouldEqual(new Size());

        private It should_not_render_the_image =
            () => DrawingContext.Verify(drawingContext => drawingContext.DrawImage(Moq.It.IsAny<ImageSource>(), Moq.It.IsAny<Rect>()), Times.Never());
    }
}
