#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ScrollViewerSpecs
{
    using System.Collections.Generic;
    using System.Reactive.Subjects;
    using Machine.Specifications;
    using Moq;
    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Input;
    using RedBadger.Xpf.Specs.Extensions;
    using It = Machine.Specifications.It;

    public abstract class a_ScrollViewer
    {
        protected static Subject<Gesture> Gestures;

        protected static Mock<IInputManager> InputManager;

        protected static Mock<Renderer> Renderer;

        protected static Mock<RootElement> RootElement;

        protected static ScrollViewer ScrollViewer;

        protected static Rect ViewPort = new Rect(0, 0, 100, 100);

        private Establish context = () =>
            {
                Renderer = new Mock<Renderer>(new Mock<ISpriteBatch>().Object, new Mock<IPrimitivesService>().Object)
                    {
                       CallBase = true 
                    };

                Gestures = new Subject<Gesture>();
                InputManager = new Mock<IInputManager>();
                InputManager.SetupGet(inputManager => inputManager.Gestures).Returns(Gestures);

                RootElement = new Mock<RootElement>(ViewPort, Renderer.Object, InputManager.Object) { CallBase = true };

                ScrollViewer = new ScrollViewer();
                RootElement.Object.Content = ScrollViewer;
            };
    }

    [Subject(typeof(ScrollViewer), "Content")]
    public class when_content_is_set_to_a_control_that_doesnt_implement_IScrollInfo : a_ScrollViewer
    {
        private static Mock<IElement> content;

        private Establish context = () => content = new Mock<IElement>();

        private Because of = () => ScrollViewer.Content = content.Object;

        private It should_set_the_content_of_the_ScrollContentPresenter_to_the_control =
            () => ((ScrollContentPresenter)ScrollViewer.Content).Content.ShouldBeTheSameAs(content.Object);

        private It should_use_a_ScrollContentPresenter =
            () => ScrollViewer.Content.ShouldBeOfType<ScrollContentPresenter>();
    }

    [Subject(typeof(ScrollViewer), "Mouse Capture")]
    public class when_a_left_mouse_button_down_gesture_is_received : a_ScrollViewer
    {
        private Establish context = () => RootElement.Object.Update();

        private Because of = () => Gestures.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(), new Vector()));

        private It should_capture_the_mouse = () => ScrollViewer.IsMouseCaptured.ShouldBeTrue();
    }

    [Subject(typeof(ScrollViewer), "Mouse Capture")]
    public class when_a_mouse_button_gesture_is_received_the_mouse_is_captured : a_ScrollViewer
    {
        private Establish context = () =>
            {
                ScrollViewer.CaptureMouse();
                RootElement.Object.Update();
            };

        private Because of = () => Gestures.OnNext(new Gesture(GestureType.LeftButtonUp, new Point(), new Vector()));

        private It should_release_mouse_capture = () => ScrollViewer.IsMouseCaptured.ShouldBeFalse();
    }

    [Subject(typeof(ScrollViewer), "Scrolling")]
    public class when_horizontal_and_vertical_scrolling_is_enabled : a_ScrollViewer
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                ScrollViewer.Content = content.Object;
            };

        private Because of = () => RootElement.Object.Update();

        private It should_allow_the_contents_height_to_exceed_the_height_of_the_viewport =
            () => ScrollViewer.Extent.Height.ShouldBeGreaterThan(ScrollViewer.Viewport.Height);

        private It should_allow_the_contents_width_to_exceed_the_width_of_the_viewport =
            () => ScrollViewer.Extent.Width.ShouldBeGreaterThan(ScrollViewer.Viewport.Width);
    }

    [Subject(typeof(ScrollViewer), "Scrolling")]
    public class when_horizontal_and_vertical_scrolling_is_disabled : a_ScrollViewer
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                ScrollViewer.Content = content.Object;
            };

        private Because of = () =>
            {
                ScrollViewer.CanHorizontallyScroll = false;
                ScrollViewer.CanVerticallyScroll = false;
                RootElement.Object.Update();
            };

        private It should_constrain_the_contents_height_to_be_less_than_or_equal_to_the_height_of_the_viewport =
            () => ScrollViewer.Extent.Height.ShouldBeLessThanOrEqualTo(ScrollViewer.Viewport.Height);

        private It should_constrain_the_contents_width_to_be_less_than_or_equal_to_the_width_of_the_viewport =
            () => ScrollViewer.Extent.Width.ShouldBeLessThanOrEqualTo(ScrollViewer.Viewport.Width);
    }

    [Subject(typeof(ScrollViewer), "Scrolling")]
    public class when_free_drag_gestures_are_received : a_ScrollViewer
    {
        private static readonly Size extent = new Size(200, 200);

        private static readonly Size viewport = new Size(100, 100);

        private static Mock<ScrollContentPresenter> scrollInfo;

        private Establish context = () =>
            {
                scrollInfo = new Mock<ScrollContentPresenter> { CallBase = true };
                ScrollViewer.Content = scrollInfo.Object;

                RootElement.Object.Update();
            };

        private Because of = () =>
            {
                ScrollViewer.CaptureMouse();
                Gestures.OnNext(new Gesture(GestureType.FreeDrag, new Point(), new Vector(-20, -30)));
                Gestures.OnNext(new Gesture(GestureType.FreeDrag, new Point(), new Vector(-5, 3)));
            };

        private It should_the_scroll_content_horizontally = () => scrollInfo.Object.Offset.X.ShouldEqual(25);

        private It should_the_scroll_content_vertically = () => scrollInfo.Object.Offset.Y.ShouldEqual(27);
    }
}
