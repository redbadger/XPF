#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ToggleButtonSpecs
{
    using System.Collections.Generic;
    using System.Reactive.Subjects;
    using Machine.Specifications;
    using Moq;
    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Controls.Primitives;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Input;
    using It = Machine.Specifications.It;

    public abstract class a_ToggleButton
    {
        protected static ToggleButton Subject;

        private Establish context = () => Subject = new ToggleButton();
    }

    public abstract class a_ToggleButton_inside_a_RootElement_with_Input_Manager : a_ToggleButton
    {
        protected static Mock<IInputManager> InputManager;

        protected static Subject<Gesture> MouseData;

        protected static Mock<Renderer> Renderer;

        protected static Mock<RootElement> RootElement;

        protected static Rect ViewPort = new Rect(0, 0, 100, 100);

        private Establish context = () =>
            {
                Renderer = new Mock<Renderer>(new Mock<ISpriteBatch>().Object, new Mock<IPrimitivesService>().Object)
                    {
                       CallBase = true 
                    };

                MouseData = new Subject<Gesture>();
                InputManager = new Mock<IInputManager>();
                InputManager.SetupGet(inputManager => inputManager.Gestures).Returns(MouseData);

                RootElement = new Mock<RootElement>(ViewPort, Renderer.Object, InputManager.Object) { CallBase = true };

                RootElement.Object.Content = Subject;
                RootElement.Object.Update();
            };

        protected static void ClickButton()
        {
            MouseData.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(0, 0)));
            MouseData.OnNext(new Gesture(GestureType.LeftButtonUp, new Point(0, 0)));
        }
    }

    [Subject(typeof(ToggleButton))]
    public class when_instantiated : a_ToggleButton
    {
        private It should_default_IsChecked_to_false = () => ((bool)Subject.IsChecked).ShouldBeFalse();

        private It should_not_be_three_state = () => Subject.IsThreeState.ShouldBeFalse();
    }

    [Subject(typeof(ToggleButton))]
    public class when_toggled_in_two_state_mode : a_ToggleButton_inside_a_RootElement_with_Input_Manager
    {
        private static int checkedEventCount;

        private static int indeterminateEventCount;

        private static bool? oneClickState;

        private static bool? threeClickState;

        private static bool? twoClickState;

        private static int unCheckedEventCount;

        private Establish context = () =>
            {
                Subject.Checked += (sender, args) => checkedEventCount++;
                Subject.Unchecked += (sender, args) => unCheckedEventCount++;
                Subject.Indeterminate += (sender, args) => indeterminateEventCount++;
            };

        private Because of = () =>
            {
                ClickButton();
                oneClickState = Subject.IsChecked;

                ClickButton();
                twoClickState = Subject.IsChecked;

                ClickButton();
                threeClickState = Subject.IsChecked;
            };

        private It should_1_be_checked_after_the_first_click = () => ((bool)oneClickState).ShouldBeTrue();

        private It should_2_not_be_checked_after_the_second_click = () => ((bool)twoClickState).ShouldBeFalse();

        private It should_3_be_checked_after_the_third_click = () => ((bool)threeClickState).ShouldBeTrue();

        private It should_not_raise_the_indeterminate_event = () => indeterminateEventCount.ShouldEqual(0);

        private It should_raise_the_checked_event = () => checkedEventCount.ShouldEqual(2);

        private It should_raise_the_unchecked_event = () => unCheckedEventCount.ShouldEqual(1);
    }

    [Subject(typeof(ToggleButton))]
    public class when_toggled_in_three_state_mode : a_ToggleButton_inside_a_RootElement_with_Input_Manager
    {
        private static int checkedEventCount;

        private static bool? fourClickState;

        private static int indeterminateEventCount;

        private static bool? oneClickState;

        private static bool? threeClickState;

        private static bool? twoClickState;

        private static int unCheckedEventCount;

        private Establish context = () =>
            {
                Subject.IsThreeState = true;

                Subject.Checked += (sender, args) => checkedEventCount++;
                Subject.Unchecked += (sender, args) => unCheckedEventCount++;
                Subject.Indeterminate += (sender, args) => indeterminateEventCount++;
            };

        private Because of = () =>
            {
                ClickButton();
                oneClickState = Subject.IsChecked;

                ClickButton();
                twoClickState = Subject.IsChecked;

                ClickButton();
                threeClickState = Subject.IsChecked;

                ClickButton();
                fourClickState = Subject.IsChecked;
            };

        private It should_1_be_checked_after_the_first_click = () => ((bool)oneClickState).ShouldBeTrue();

        private It should_2_be_indeterminate_after_the_second_click = () => twoClickState.ShouldBeNull();

        private It should_3_not_be_checked_after_the_third_click = () => ((bool)threeClickState).ShouldBeFalse();

        private It should_4_be_checked_after_the_fourth_click = () => ((bool)fourClickState).ShouldBeTrue();

        private It should_raise_the_checked_event = () => checkedEventCount.ShouldEqual(2);

        private It should_raise_the_indeterminate_event = () => indeterminateEventCount.ShouldEqual(1);

        private It should_raise_the_unchecked_event = () => unCheckedEventCount.ShouldEqual(1);
    }
}
