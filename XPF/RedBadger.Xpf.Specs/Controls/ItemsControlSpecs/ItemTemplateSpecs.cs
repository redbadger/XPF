#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ItemsControlSpecs
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Data;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;

    using It = Machine.Specifications.It;

    [Subject(typeof(ItemsControl), "Item Template")]
    public class when_an_item_template_has_not_been_specified : an_ItemsControl
    {
        private static Exception exception;

        private static IList<Color> items;

        private Establish context = () =>
            {
                items = new List<Color> { Colors.Blue, Colors.Red };
                ItemsControl.ItemsSource = items;
            };

        private Because of = () => exception = Catch.Exception(() => ItemsControl.Measure(new Size()));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<InvalidOperationException>();
    }

    [Subject(typeof(ItemsControl), "Item Template")]
    public class when_item_template_is_changed : an_ItemsControl
    {
        private static IList<Color> items;

        private Establish context = () =>
            {
                ItemsControl.ItemTemplate = _ => new TextBlock(new Mock<ISpriteFont>().Object);
                items = new ObservableCollection<Color> { Colors.Blue };
                ItemsControl.ItemsSource = items;

                ItemsControl.Measure(new Size());
            };

        private Because of = () =>
            {
                ItemsControl.ItemTemplate = _ => new Border();
                items.Add(Colors.Red);

                ItemsControl.Measure(new Size());
            };

        private It should_1_use_the_original_item_template_for_items_added_before_the_change =
            () => ItemsControl.ItemsPanel.Children[0].ShouldBeOfType<TextBlock>();

        private It should_2_use_the_new_item_template_for_items_added_after_the_change =
            () => ItemsControl.ItemsPanel.Children[1].ShouldBeOfType<Border>();
    }

    [Subject(typeof(ItemsControl), "Item Template")]
    public class when_item_template_contains_a_binding_to_a_property_on_the_data_context : an_ItemsControl
    {
        private const string ExpectedChangedValue = "Changed Value";

        private const string ExpectedInitialValue = "Existing Value";

        private static string actualInitialValue;

        private static TestBindingObject source;

        private static string updatedValue;

        private Establish context = () =>
            {
                source = new TestBindingObject { Name = ExpectedInitialValue };
                ItemsControl.ItemsSource = new[] { source };

                ItemsControl.ItemTemplate = _ =>
                    {
                        var textBlock = new TextBlock(new Mock<ISpriteFont>().Object);

                        IObservable<string> fromSource =
                            BindingFactory.CreateOneWay<TestBindingObject, string>(s => s.Name);
                        textBlock.Bind(TextBlock.TextProperty, fromSource);

                        return textBlock;
                    };

                ItemsControl.Measure(new Size());
            };

        private Because of = () =>
            {
                actualInitialValue = ((TextBlock)ItemsControl.ItemsPanel.Children[0]).Text;

                source.Name = ExpectedChangedValue;
                updatedValue = ((TextBlock)ItemsControl.ItemsPanel.Children[0]).Text;
            };

        private It should_bind_to_the_data_contexts_initial_value =
            () => actualInitialValue.ShouldEqual(ExpectedInitialValue);

        private It should_update_the_bound_property_when_the_source_value_changes =
            () => updatedValue.ShouldEqual(ExpectedChangedValue);

        private class TestBindingObject : INotifyPropertyChanged
        {
            private string name;

            public event EventHandler<PropertyChangedEventArgs> PropertyChanged;

            public string Name
            {
                get
                {
                    return this.name;
                }

                set
                {
                    if (this.name != value)
                    {
                        this.name = value;
                        this.InvokePropertyChanged("Name");
                    }
                }
            }

            public void InvokePropertyChanged(string propertyName)
            {
                EventHandler<PropertyChangedEventArgs> handler = this.PropertyChanged;
                if (handler != null)
                {
                    handler(this, new PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }

    [Subject(typeof(ItemsControl), "Item Template")]
    public class when_item_template_contains_a_binding_to_a_reactive_property_on_the_data_context : an_ItemsControl
    {
        private const string ExpectedChangedValue = "Changed Value";

        private const string ExpectedInitialValue = "Existing Value";

        private static string actualInitialValue;

        private static TestBindingObject source;

        private static string updatedValue;

        private Establish context = () =>
            {
                source = new TestBindingObject { Name = ExpectedInitialValue };
                ItemsControl.ItemsSource = new[] { source };

                ItemsControl.ItemTemplate = _ =>
                    {
                        var textBlock = new TextBlock(new Mock<ISpriteFont>().Object);

                        IObservable<string> fromSource =
                            BindingFactory.CreateOneWay<TestBindingObject, string>(TestBindingObject.NameProperty);
                        textBlock.Bind(TextBlock.TextProperty, fromSource);

                        return textBlock;
                    };

                ItemsControl.Measure(new Size());
            };

        private Because of = () =>
            {
                actualInitialValue = ((TextBlock)ItemsControl.ItemsPanel.Children[0]).Text;

                source.Name = ExpectedChangedValue;
                updatedValue = ((TextBlock)ItemsControl.ItemsPanel.Children[0]).Text;
            };

        private It should_bind_to_the_data_contexts_initial_value =
            () => actualInitialValue.ShouldEqual(ExpectedInitialValue);

        private It should_update_the_bound_property_when_the_source_value_changes =
            () => updatedValue.ShouldEqual(ExpectedChangedValue);

        private class TestBindingObject : ReactiveObject
        {
            public static readonly ReactiveProperty<string> NameProperty = ReactiveProperty<string>.Register(
                "Name", typeof(TestBindingObject));

            public string Name
            {
                get
                {
                    return this.GetValue(NameProperty);
                }

                set
                {
                    this.SetValue(NameProperty, value);
                }
            }
        }
    }
}
