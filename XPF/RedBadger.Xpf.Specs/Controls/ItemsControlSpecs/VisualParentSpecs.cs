#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ItemsControlSpecs
{
    using System.Linq;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;

    [Subject(typeof(ItemsControl))]
    public class when_a_panel_is_set : an_ItemsControl
    {
        private static Mock<Panel> panel;

        private Establish context = () =>
            {
                ItemsControl.Measure(Size.Empty);
                panel = new Mock<Panel> { CallBase = true };
            };

        private Because of = () => ItemsControl.ItemsPanel = panel.Object;

        private It should_add_the_panel_as_a_descendant_in_its_visual_tree = () =>
            {
                IElement ancestor = ItemsControl.ItemsPanel.VisualParent;
                while (ancestor != null && !(ancestor is ItemsControl))
                {
                    ancestor = ancestor.VisualParent;
                }

                ancestor.ShouldBeTheSameAs(ItemsControl);
            };

        private It should_invalidate_measure = () => ItemsControl.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(ItemsControl))]
    public class when_asked_for_its_children : an_ItemsControl
    {
        private It should_return_one_child_only = () => ItemsControl.GetVisualChildren().Count().ShouldEqual(1);
    }

    [Subject(typeof(ItemsControl))]
    public class when_panel_is_changed : an_ItemsControl
    {
        private static Mock<Panel> oldPanel;

        private Establish context = () =>
            {
                oldPanel = new Mock<Panel> { CallBase = true };
                ItemsControl.ItemsPanel = oldPanel.Object;
            };

        private Because of = () => ItemsControl.ItemsPanel = new Mock<Panel> { CallBase = true }.Object;

        private It should_unset_the_parent_of_the_outgoing_panel = () => oldPanel.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(ItemsControl))]
    public class when_the_default_panel_is_used : an_ItemsControl
    {
        private It should_have_added_a_panel_as_a_descendant_in_its_visual_tree = () =>
            {
                IElement ancestor = ItemsControl.ItemsPanel.VisualParent;

                while (ancestor != null && !(ancestor is ItemsControl))
                {
                    ancestor = ancestor.VisualParent;
                }

                ancestor.ShouldBeTheSameAs(ItemsControl);
            };
    }
}
