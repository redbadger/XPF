#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ScrollContentPresenterSpecs
{
    using System;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;

    public abstract class a_ScrollContentPresenter
    {
        protected static readonly Size AvailableSize = new Size(100, 100);

        protected static ScrollContentPresenter Subject;

        private Establish context = () => Subject = new ScrollContentPresenter();
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_set_to_not_a_number : a_ScrollContentPresenter
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => Subject.SetHorizontalOffset(double.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentOutOfRangeException>();
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_set_to_a_negative_value : a_ScrollContentPresenter
    {
        private Establish context = () => Subject.SetHorizontalOffset(10);

        private Because of = () => Subject.SetHorizontalOffset(-10);

        private It should_set_the_offset_to_zero = () => Subject.Offset.X.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_scrolling_is_disabled_and_an_offset_is_set : a_ScrollContentPresenter
    {
        private Establish context = () => Subject.CanHorizontallyScroll = false;

        private Because of = () => Subject.SetHorizontalOffset(10);

        private It should_have_no_effect = () => Subject.Offset.X.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_changed : a_ScrollContentPresenter
    {
        private Establish context = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private Because of = () => Subject.SetHorizontalOffset(10);

        private It should_invalidate_arrange = () => Subject.IsArrangeValid.ShouldBeFalse();
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_set_to_not_a_number : a_ScrollContentPresenter
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => Subject.SetVerticalOffset(double.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentOutOfRangeException>();
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_set_to_a_negative_value : a_ScrollContentPresenter
    {
        private Establish context = () => Subject.SetVerticalOffset(10);

        private Because of = () => Subject.SetVerticalOffset(-10);

        private It should_set_the_offset_to_zero = () => Subject.Offset.Y.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_scrolling_is_disabled_and_an_offset_is_set : a_ScrollContentPresenter
    {
        private Establish context = () => Subject.CanVerticallyScroll = false;

        private Because of = () => Subject.SetVerticalOffset(10);

        private It should_have_no_effect = () => Subject.Offset.Y.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_changed : a_ScrollContentPresenter
    {
        private Establish context = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private Because of = () => Subject.SetVerticalOffset(10);

        private It should_invalidate_arrange = () => Subject.IsArrangeValid.ShouldBeFalse();
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_scrolled : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                Subject.Content = content.Object;
            };

        private Because of = () =>
            {
                Subject.SetHorizontalOffset(20);
                Subject.SetVerticalOffset(30);

                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_set_the_child_visual_offset_correctly =
            () => content.Object.VisualOffset.ShouldEqual(new Vector(-20, -30));
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_scrolled_beyond_its_extent : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                Subject.Content = content.Object;
            };

        private Because of = () =>
            {
                Subject.SetHorizontalOffset(220);
                Subject.SetVerticalOffset(230);

                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_coerce_its_own_offset_to_keep_it_inside_the_extent =
            () => Subject.Offset.ShouldEqual(new Vector(100, 100));

        private It should_coerce_the_child_visual_offset_to_keep_it_inside_the_extent =
            () => content.Object.VisualOffset.ShouldEqual(new Vector(-100, -100));
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_larger_than_the_space_available : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                Subject.Content = content.Object;
            };

        private Because of = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_clip = () => Subject.ClippingRect.ShouldEqual(new Rect(AvailableSize));
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_smaller_than_the_space_available : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 20;
                content.Object.Height = 20;

                Subject.Content = content.Object;
            };

        private Because of = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_not_clip = () => Subject.ClippingRect.ShouldEqual(Rect.Empty);
    }
}
