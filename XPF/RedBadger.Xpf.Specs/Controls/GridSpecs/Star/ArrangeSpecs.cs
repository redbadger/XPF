#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.GridSpecs.Star
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Specs.Extensions;

    using It = Machine.Specifications.It;

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_a_grid_with_a_single_element : a_Grid
    {
        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                child = new Mock<UIElement> { CallBase = true };
                child.Object.HorizontalAlignment = HorizontalAlignment.Left;
                child.Object.VerticalAlignment = VerticalAlignment.Top;

                Subject.Children.Add(child.Object);
                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_that_element_correctly = () => child.Object.VisualOffset.ShouldEqual(Vector.Zero);
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_a_grid_with_two_rows_and_two_columns : a_Star_Grid_with_two_rows_and_two_columns
    {
        private Establish context = () => Subject.Measure(AvailableSize);

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_1_layout_the_top_left_child_correctly =
            () => TopLeftChild.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_2_layout_the_top_right_child_correctly =
            () => TopRightChild.Object.VisualOffset.ShouldEqual(new Vector(100, 0));

        private It should_3_layout_the_bottom_left_child_correctly =
            () => BottomLeftChild.Object.VisualOffset.ShouldEqual(new Vector(0, 100));

        private It should_4_layout_the_bottom_right_child_correctly =
            () => BottomRightChild.Object.VisualOffset.ShouldEqual(new Vector(100, 100));
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_a_3_x_3_grid_with_increasing_star_lengths : a_Grid
    {
        private static readonly Mock<UIElement>[,] children = new Mock<UIElement>[3, 3];

        private static readonly double heightUnit = AvailableSize.Height / 6;

        private static readonly double widthUnit = AvailableSize.Width / 6;

        private Establish context = () =>
            {
                for (int row = 0; row < 3; row++)
                {
                    Subject.RowDefinitions.Add(
                        new RowDefinition { Height = new GridLength(row + 1, GridUnitType.Star) });
                }

                for (int col = 0; col < 3; col++)
                {
                    Subject.ColumnDefinitions.Add(
                        new ColumnDefinition { Width = new GridLength(col + 1, GridUnitType.Star) });
                }

                for (int row = 0; row < 3; row++)
                {
                    for (int col = 0; col < 3; col++)
                    {
                        children[row, col] = CreateChild(row, col);
                    }
                }

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly =
            () => children[0, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, 0d));

        private It should_layout_child_2_correctly =
            () => children[0, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit, 0d));

        private It should_layout_child_3_correctly =
            () => children[0, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, 0d));

        private It should_layout_child_4_correctly =
            () => children[1, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, heightUnit));

        private It should_layout_child_5_correctly =
            () => children[1, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit, heightUnit));

        private It should_layout_child_6_correctly =
            () => children[1, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, heightUnit));

        private It should_layout_child_7_correctly =
            () => children[2, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, heightUnit * 3));

        private It should_layout_child_8_correctly =
            () => children[2, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit, heightUnit * 3));

        private It should_layout_child_9_correctly =
            () => children[2, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, heightUnit * 3));
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_a_3_x_3_grid_with_decreasing_star_lengths : a_Grid
    {
        private static readonly Mock<UIElement>[,] children = new Mock<UIElement>[3, 3];

        private static readonly double heightUnit = AvailableSize.Height / 6;

        private static readonly double widthUnit = AvailableSize.Width / 6;

        private Establish context = () =>
            {
                for (int row = 2; row >= 0; row--)
                {
                    Subject.RowDefinitions.Add(
                        new RowDefinition { Height = new GridLength(row + 1, GridUnitType.Star) });
                }

                for (int col = 2; col >= 0; col--)
                {
                    Subject.ColumnDefinitions.Add(
                        new ColumnDefinition { Width = new GridLength(col + 1, GridUnitType.Star) });
                }

                for (int row = 0; row < 3; row++)
                {
                    for (int col = 0; col < 3; col++)
                    {
                        children[row, col] = CreateChild(row, col);
                    }
                }

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly =
            () => children[0, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, 0d));

        private It should_layout_child_2_correctly =
            () => children[0, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, 0d));

        private It should_layout_child_3_correctly =
            () => children[0, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 5, 0d));

        private It should_layout_child_4_correctly =
            () => children[1, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, heightUnit * 3));

        private It should_layout_child_5_correctly =
            () => children[1, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, heightUnit * 3));

        private It should_layout_child_6_correctly =
            () => children[1, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 5, heightUnit * 3));

        private It should_layout_child_7_correctly =
            () => children[2, 0].Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, heightUnit * 5));

        private It should_layout_child_8_correctly =
            () => children[2, 1].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 3, heightUnit * 5));

        private It should_layout_child_9_correctly =
            () => children[2, 2].Object.VisualOffset.ShouldBeCloseTo(new Vector(widthUnit * 5, heightUnit * 5));
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_a_grid_with_a_child_element_that_is_bigger_than_the_available_size : a_Grid
    {
        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = 240;
                child.Object.Height = 250;
                Subject.Children.Add(child.Object);
                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_the_child_element_correctly = () => child.Object.VisualOffset.ShouldEqual(Vector.Zero);
    }

    [Subject(typeof(Grid), "Arrange - Min and Max")]
    public class when_arranging_a_grid_when_there_is_a_column_with_min_width_that_exceeds_its_proportional_allocation :
        a_Grid
    {
        private const double ColumnMinWidth = 100;

        private static Mock<UIElement> child1;

        private static Mock<UIElement> child2;

        private static Mock<UIElement> child3;

        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { MinWidth = ColumnMinWidth });
                Subject.ColumnDefinitions.Add(new ColumnDefinition());
                Subject.ColumnDefinitions.Add(new ColumnDefinition());

                child1 = new Mock<UIElement> { CallBase = true };
                child2 = new Mock<UIElement> { CallBase = true };
                child3 = new Mock<UIElement> { CallBase = true };

                Grid.SetColumn(child1.Object, 0);
                Grid.SetColumn(child2.Object, 1);
                Grid.SetColumn(child3.Object, 2);

                Subject.Children.Add(child1.Object);
                Subject.Children.Add(child2.Object);
                Subject.Children.Add(child3.Object);

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly = () => child1.Object.VisualOffset.ShouldBeCloseTo(Vector.Zero);

        private It should_layout_child_2_correctly =
            () => child2.Object.VisualOffset.ShouldBeCloseTo(new Vector(ColumnMinWidth, 0d));

        private It should_layout_child_3_correctly =
            () =>
            child3.Object.VisualOffset.ShouldBeCloseTo(
                new Vector(ColumnMinWidth + ((AvailableSize.Width - ColumnMinWidth) / 2), 0d));
    }

    [Subject(typeof(Grid), "Arrange - Min and Max")]
    public class
        when_arranging_a_grid_when_there_is_a_column_with_max_width_that_is_less_than_its_proportional_allocation :
            a_Grid
    {
        private const double ColumnMaxWidth = 50;

        private static Mock<UIElement> child1;

        private static Mock<UIElement> child2;

        private static Mock<UIElement> child3;

        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { MaxWidth = ColumnMaxWidth });
                Subject.ColumnDefinitions.Add(new ColumnDefinition());
                Subject.ColumnDefinitions.Add(new ColumnDefinition());

                child1 = new Mock<UIElement> { CallBase = true };
                child2 = new Mock<UIElement> { CallBase = true };
                child3 = new Mock<UIElement> { CallBase = true };

                Grid.SetColumn(child1.Object, 0);
                Grid.SetColumn(child2.Object, 1);
                Grid.SetColumn(child3.Object, 2);

                Subject.Children.Add(child1.Object);
                Subject.Children.Add(child2.Object);
                Subject.Children.Add(child3.Object);

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly = () => child1.Object.VisualOffset.ShouldBeCloseTo(Vector.Zero);

        private It should_layout_child_2_correctly =
            () => child2.Object.VisualOffset.ShouldBeCloseTo(new Vector(ColumnMaxWidth, 0d));

        private It should_layout_child_3_correctly =
            () =>
            child3.Object.VisualOffset.ShouldBeCloseTo(
                new Vector(ColumnMaxWidth + ((AvailableSize.Width - ColumnMaxWidth) / 2), 0d));
    }

    [Subject(typeof(Grid), "Arrange - Min and Max")]
    public class when_arranging_a_grid_when_there_is_a_row_with_min_height_that_exceeds_its_proportional_allocation :
        a_Grid
    {
        private const double RowMinHeight = 100;

        private static Mock<UIElement> child1;

        private static Mock<UIElement> child2;

        private static Mock<UIElement> child3;

        private Establish context = () =>
            {
                Subject.RowDefinitions.Add(new RowDefinition { MinHeight = RowMinHeight });
                Subject.RowDefinitions.Add(new RowDefinition());
                Subject.RowDefinitions.Add(new RowDefinition());

                child1 = new Mock<UIElement> { CallBase = true };
                child2 = new Mock<UIElement> { CallBase = true };
                child3 = new Mock<UIElement> { CallBase = true };

                Grid.SetRow(child1.Object, 0);
                Grid.SetRow(child2.Object, 1);
                Grid.SetRow(child3.Object, 2);

                Subject.Children.Add(child1.Object);
                Subject.Children.Add(child2.Object);
                Subject.Children.Add(child3.Object);

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly = () => child1.Object.VisualOffset.ShouldBeCloseTo(Vector.Zero);

        private It should_layout_child_2_correctly =
            () => child2.Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, RowMinHeight));

        private It should_layout_child_3_correctly =
            () =>
            child3.Object.VisualOffset.ShouldBeCloseTo(
                new Vector(0d, RowMinHeight + ((AvailableSize.Height - RowMinHeight) / 2)));
    }

    [Subject(typeof(Grid), "Arrange - Min and Max")]
    public class when_arranging_a_grid_when_there_is_a_row_with_max_height_that_is_less_than_its_proportional_allocation :
        a_Grid
    {
        private const double RowMaxHeight = 50;

        private static Mock<UIElement> child1;

        private static Mock<UIElement> child2;

        private static Mock<UIElement> child3;

        private Establish context = () =>
            {
                Subject.RowDefinitions.Add(new RowDefinition { MaxHeight = RowMaxHeight });
                Subject.RowDefinitions.Add(new RowDefinition());
                Subject.RowDefinitions.Add(new RowDefinition());

                child1 = new Mock<UIElement> { CallBase = true };
                child2 = new Mock<UIElement> { CallBase = true };
                child3 = new Mock<UIElement> { CallBase = true };

                Grid.SetRow(child1.Object, 0);
                Grid.SetRow(child2.Object, 1);
                Grid.SetRow(child3.Object, 2);

                Subject.Children.Add(child1.Object);
                Subject.Children.Add(child2.Object);
                Subject.Children.Add(child3.Object);

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly = () => child1.Object.VisualOffset.ShouldBeCloseTo(Vector.Zero);

        private It should_layout_child_2_correctly =
            () => child2.Object.VisualOffset.ShouldBeCloseTo(new Vector(0d, RowMaxHeight));

        private It should_layout_child_3_correctly =
            () =>
            child3.Object.VisualOffset.ShouldBeCloseTo(
                new Vector(0d, RowMaxHeight + ((AvailableSize.Height - RowMaxHeight) / 2)));
    }

    [Subject(typeof(Grid), "Arrange - Excess Allocation")]
    public class when_arranging_a_grid_and_the_columns_are_over_allocated : a_Grid
    {
        private const double ChildWidth = 100d;

        private const double Column0Min = 20d;

        private const double Column2Min = 100d;

        private static readonly Mock<UIElement>[] children = new Mock<UIElement>[3];

        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { MinWidth = Column0Min });
                Subject.ColumnDefinitions.Add(new ColumnDefinition());
                Subject.ColumnDefinitions.Add(new ColumnDefinition { MinWidth = Column2Min });

                children[0] = CreateChild(0, 0);
                children[1] = CreateChild(0, 1);
                children[2] = CreateChild(0, 2);

                children[1].Object.Width = ChildWidth;

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_child_1_correctly =
            () => children[0].Object.VisualOffset.ShouldEqual(new Vector(0d, 0d));

        private It should_layout_child_2_correctly =
            () =>
            children[1].Object.VisualOffset.ShouldBeCloseTo(
                new Vector((AvailableSize.Width - Column2Min) - AvailableSize.Width / 3, 0d));

        private It should_layout_child_3_correctly =
            () => children[2].Object.VisualOffset.ShouldBeCloseTo(new Vector(AvailableSize.Width - Column2Min, 0d));
    }
}
