#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.GridSpecs.Pixel
{
    using Machine.Specifications;

    using RedBadger.Xpf.Controls;

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_two_rows_and_two_columns_of_type_pixel : a_Grid_with_4_children
    {
        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(5) });
                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(6) });
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(7) });
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(8) });

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_the_bottom_left_child_correctly =
            () => BottomLeftChild.Object.VisualOffset.ShouldEqual(new Vector(0, 7));

        private It should_layout_the_bottom_right_child_correctly =
            () => BottomRightChild.Object.VisualOffset.ShouldEqual(new Vector(5, 7));

        private It should_layout_the_top_left_child_correctly =
            () => TopLeftChild.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_layout_the_top_right_child_correctly =
            () => TopRightChild.Object.VisualOffset.ShouldEqual(new Vector(5, 0));
    }
}
