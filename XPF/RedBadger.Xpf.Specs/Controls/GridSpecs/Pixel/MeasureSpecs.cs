#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.GridSpecs.Pixel
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_there_is_a_column_width_defined : a_Grid
    {
        private const int ChildHeight = 60;

        private const double ColumnWidth = 10;

        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ColumnWidth) });

                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = 50;
                child.Object.Height = ChildHeight;

                Subject.Children.Add(child.Object);
            };

        private Because of = () => Subject.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_the_height_of_its_child =
            () => Subject.DesiredSize.Height.ShouldEqual(ChildHeight);

        private It should_have_a_desired_width_equal_to_that_of_the_column_width =
            () => Subject.DesiredSize.Width.ShouldEqual(ColumnWidth);
    }

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_there_is_a_row_height_defined : a_Grid
    {
        private const int ChildWidth = 50;

        private const double RowHeight = 10;

        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(RowHeight) });

                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = ChildWidth;
                child.Object.Height = 60;

                Subject.Children.Add(child.Object);
            };

        private Because of = () => Subject.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_that_of_the_row_height =
            () => Subject.DesiredSize.Height.ShouldEqual(RowHeight);

        private It should_have_a_desired_width_equal_to_the_width_of_its_child =
            () => Subject.DesiredSize.Width.ShouldEqual(ChildWidth);
    }

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_there_are_two_rows_and_two_columns : a_Grid
    {
        private const double ExpectedHeight1 = 66f;

        private const double ExpectedHeight2 = 80;

        private const double ExpectedWidth1 = 45f;

        private const double ExpectedWidth2 = 54f;

        private Establish context = () =>
            {
                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ExpectedWidth1) });
                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ExpectedWidth2) });
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(ExpectedHeight1) });
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(ExpectedHeight2) });
            };

        private Because of = () => Subject.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_the_sum_of_row_heights =
            () => Subject.DesiredSize.Height.ShouldEqual(ExpectedHeight1 + ExpectedHeight2);

        private It should_have_a_desired_width_equal_to_the_sum_of_the_column_widths =
            () => Subject.DesiredSize.Width.ShouldEqual(ExpectedWidth1 + ExpectedWidth2);
    }

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_a_child_element_is_bigger_than_the_cell_size : a_Grid
    {
        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = 40;
                child.Object.Height = 50;
                Subject.Children.Add(child.Object);

                Subject.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(20) });
                Subject.RowDefinitions.Add(new RowDefinition { Height = new GridLength(30) });
            };

        private Because of = () => Subject.Measure(AvailableSize);

        private It should_not_affect_the_desired_size = () => Subject.DesiredSize.ShouldEqual(new Size(20, 30));
    }
}
