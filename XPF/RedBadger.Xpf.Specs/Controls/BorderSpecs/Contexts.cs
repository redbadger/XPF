#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.BorderSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Graphics;

    using It = Moq.It;

    public abstract class a_Border
    {
        protected static Border Subject;

        private Establish context = () => { Subject = new Border(); };
    }

    public abstract class a_Border_with_child : a_Border
    {
        protected static readonly Size AvailableSize = new Size(200, 200);

        protected static Mock<UIElement> Child;

        protected static Size ChildSize;

        protected static Mock<IDrawingContext> DrawingContext;

        protected static IRenderer Renderer;

        protected static Mock<RootElement> RootElement;

        private Establish context = () =>
            {
                var renderer = new Mock<IRenderer>();
                DrawingContext = new Mock<IDrawingContext>();
                renderer.Setup(r => r.GetDrawingContext(It.IsAny<IElement>())).Returns(DrawingContext.Object);

                RootElement = new Mock<RootElement>(new Rect(AvailableSize), renderer.Object) { CallBase = true };

                ChildSize = new Size(15, 35);
                Child = new Mock<UIElement> { CallBase = true };
                Child.Object.HorizontalAlignment = HorizontalAlignment.Left;
                Child.Object.VerticalAlignment = VerticalAlignment.Top;
                Child.Object.Width = ChildSize.Width;
                Child.Object.Height = ChildSize.Height;

                Subject.Child = Child.Object;

                RootElement.Object.Content = Subject;
            };
    }
}
