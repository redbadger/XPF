#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

/*namespace RedBadger.Xpf.Specs.Controls.VirtualizingStackPanelSpecs
{
    using System.Linq;
    using System.Windows;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf;
    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;
    using UIElement = RedBadger.Xpf.UIElement;

    public abstract class a_VirtualizingStackPanel
    {
        protected static ITemplatedList<IElement> Children;

        protected static VirtualizingStackPanel Subject;

        private Establish context = () =>
            {
                Subject = new VirtualizingStackPanel();
                Children = Subject.Children as ITemplatedList<IElement>;
            };
    }

    [Subject(typeof(VirtualizingStackPanel), "Scrolling")]
    public class when_placed_in_a_ScrollViewer : a_VirtualizingStackPanel
    {
        private static ScrollViewer scrollViewer;

        private Establish context = () => scrollViewer = new ScrollViewer();

        private Because of = () => scrollViewer.Content = Subject;

        private It should_not_need_a_ScrollContentPresenter = () => Subject.VisualParent.ShouldBeOfType<ScrollViewer>();
    }

    [Subject(typeof(VirtualizingStackPanel), "Children")]
    public class when_a_child_is_added : a_VirtualizingStackPanel
    {
        private Because of = () =>
            {
                var element = new Mock<UIElement> { CallBase = true }.Object;
                element.Width = 100;
                Children.Add(null, () => element);
                Subject.Measure(new Size());
                Subject.Arrange(new Rect());
            };

        private It should_contain_the_child = () => Subject.Children[0].ShouldBeOfType<IElement>();

        private It should_not_arrange_the_child = () => Subject.Children[0].IsArrangeValid.ShouldBeFalse();

        private It should_not_measure_the_child = () => Subject.Children[0].IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(VirtualizingStackPanel), "Virtualization")]
    public class when_a_child_is_added_that_wants_to_make_the_extent_bigger_than_the_viewport : a_VirtualizingStackPanel
    {
        private static UIElement firstChild;

        private static ScrollViewer scrollViewer;

        private Establish context = () =>
            {
                scrollViewer = new ScrollViewer { Content = Subject, Width = 50, Height = 100 };
                firstChild = new Mock<UIElement>().Object;
                firstChild.Width = 50;
                firstChild.Height =101;
                Children.Add(null, () => firstChild);
                Subject.Measure(new Size(50, 100));
            };

        private Because of = () =>
            {
                var element = new Mock<UIElement>().Object;
                element.Height = 50;
                Children.Add(null, () => element);
                Subject.Measure(new Size(50, 100));
            };

        private It should_contain_all_the_added_children = () => Subject.Children.Count.ShouldEqual(2);

        private It should_have_an_extent_equal_to_the_first_childs_desired_size =
            () => scrollViewer.Extent.ShouldEqual(firstChild.DesiredSize);

        private It should_not_add_the_child_to_its_visual_tree =
            () => Subject.GetVisualChildren().Count().ShouldEqual(1);

        private It should_virtualize_the_child_which_is_not_in_view =
            () => Subject.GetVisualChildren().Last().ShouldBeTheSameAs(firstChild);
    }
}*/
