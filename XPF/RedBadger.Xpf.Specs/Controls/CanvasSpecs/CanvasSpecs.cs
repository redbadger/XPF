#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.CanvasSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;

    public abstract class a_Canvas
    {
        protected static readonly Size AvailableSize = new Size(100, 100);

        protected static Mock<UIElement> Child;

        protected static Canvas Subject;

        private Establish context = () =>
            {
                Subject = new Canvas();

                Child = new Mock<UIElement> { CallBase = true };
                Subject.Children.Add(Child.Object);
            };
    }

    [Subject(typeof(Canvas), "Measure")]
    public class when_measuring : a_Canvas
    {
        private static Size childExpectedSize = new Size(1000, 1500);

        private Establish context = () =>
            {
                Child.Object.Width = childExpectedSize.Width;
                Child.Object.Height = childExpectedSize.Height;
            };

        private Because of = () => Subject.Measure(AvailableSize);

        private It should_give_its_children_as_much_space_as_it_requires =
            () => Child.Object.DesiredSize.ShouldEqual(childExpectedSize);

        private It should_have_a_desired_size_of_zero = () => Subject.DesiredSize.ShouldEqual(new Size());
    }

    [Subject(typeof(Canvas), "Measure")]
    public class when_arranging : a_Canvas
    {
        private static Size childExpectedSize = new Size(1000, 1500);

        private Establish context = () =>
            {
                Child.Object.Width = childExpectedSize.Width;
                Child.Object.Height = childExpectedSize.Height;
            };

        private Because of = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_not_clip = () => Subject.ClippingRect.ShouldEqual(Rect.Empty);
    }

    [Subject(typeof(Canvas), "Arrange")]
    public class when_a_child_is_positioned : a_Canvas
    {
        private const int left = 10;

        private const int top = 20;

        private Because of = () =>
            {
                Canvas.SetLeft(Child.Object, left);
                Canvas.SetTop(Child.Object, top);
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private It should_be_assigned_the_correct_offset =
            () => Child.Object.VisualOffset.ShouldEqual(new Vector(left, top));
    }

    [Subject(typeof(Canvas), "Arrange")]
    public class when_a_child_is_moved_left : a_Canvas
    {
        private Establish context = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private Because of = () => Canvas.SetLeft(Child.Object, 10);

        private It should_invalidate_arrange = () => Subject.IsArrangeValid.ShouldBeFalse();
    }

    [Subject(typeof(Canvas), "Arrange")]
    public class when_a_child_is_moved_top : a_Canvas
    {
        private Establish context = () =>
            {
                Subject.Measure(AvailableSize);
                Subject.Arrange(new Rect(AvailableSize));
            };

        private Because of = () => Canvas.SetTop(Child.Object, 10);

        private It should_invalidate_arrange = () => Subject.IsArrangeValid.ShouldBeFalse();
    }
}
