#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.ReactiveObjectSpecs.BindingSpecs.INotifyPropertyChangedSpecs
{
    using System;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Data;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;

    using It = Machine.Specifications.It;

    public class TestBindingObject : INotifyPropertyChanged
    {
        private Brush brush;

        private SolidColorBrush solidColorBrush;

        private double width;

        public event EventHandler<PropertyChangedEventArgs> PropertyChanged;

        public Brush Brush
        {
            get
            {
                return this.brush;
            }

            set
            {
                if (this.brush != value)
                {
                    this.brush = value;
                    this.OnPropertyChanged("Brush");
                }
            }
        }

        public SolidColorBrush SolidColorBrush
        {
            get
            {
                return this.solidColorBrush;
            }

            set
            {
                if (this.solidColorBrush != value)
                {
                    this.solidColorBrush = value;
                    this.OnPropertyChanged("SolidColorBrush");
                }
            }
        }

        public double Width
        {
            get
            {
                return this.width;
            }

            set
            {
                if (this.width != value)
                {
                    this.width = value;
                    this.OnPropertyChanged("Width");
                }
            }
        }

        public void OnPropertyChanged(string propertyName)
        {
            EventHandler<PropertyChangedEventArgs> handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Subject(typeof(ReactiveObject), "One Way")]
    public class when_a_binding_is_one_way_to_a_property_on_the_data_context
    {
        private const double ExpectedWidth = 10d;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<double> fromSource = BindingFactory.CreateOneWay<TestBindingObject, double>(o => o.Width);
                target.Bind(UIElement.WidthProperty, fromSource);

                target.DataContext = source;
                target.Measure(Size.Empty);
            };

        private Because of = () => source.Width = ExpectedWidth;

        private It should_update_the_target_property_with_the_correct_value =
            () => target.Width.ShouldEqual(ExpectedWidth);
    }

    [Subject(typeof(ReactiveObject), "One Way")]
    public class when_a_binding_is_one_way_to_a_property_on_the_data_context_and_type_conversion_is_needed
    {
        private const double ExpectedWidth = 10d;

        private static TestBindingObject source;

        private static TextBlock target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new TextBlock(new Mock<ISpriteFont>().Object);

                IObservable<string> fromSource = BindingFactory.CreateOneWay<TestBindingObject, double, string>(o => o.Width);
                target.Bind(TextBlock.TextProperty, fromSource);

                target.DataContext = source;
                target.Measure(Size.Empty);
            };

        private Because of = () => source.Width = ExpectedWidth;

        private It should_update_the_target_property_with_the_correct_value =
            () => target.Text.ShouldEqual(ExpectedWidth.ToString());
    }

    [Subject(typeof(ReactiveObject), "One Way")]
    public class when_a_binding_is_one_way_to_a_property_on_a_specified_source
    {
        private const double ExpectedWidth = 10d;

        private const double InitialWidth = 5d;

        private static IObservable<double> fromSource;

        private static double initialBoundValue;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject { Width = InitialWidth };
                target = new Border();

                fromSource = BindingFactory.CreateOneWay(source, o => o.Width);
            };

        private Because of = () =>
            {
                target.Bind(UIElement.WidthProperty, fromSource);
                initialBoundValue = target.Width;

                source.Width = ExpectedWidth;
            };

        private It should_1_update_the_target_property_with_the_initial_value_when_the_binding_is_created =
            () => initialBoundValue.ShouldEqual(InitialWidth);

        private It should_2_update_the_target_property_with_the_correct_value_when_the_source_value_is_changed =
            () => target.Width.ShouldEqual(ExpectedWidth);
    }

    [Subject(typeof(ReactiveObject), "One Way")]
    public class when_a_binding_is_one_way_to_a_property_on_a_specified_source_and_type_conversion_is_needed
    {
        private const double ExpectedWidth = 10d;

        private const double InitialWidth = 5d;

        private static IObservable<string> fromSource;

        private static string initialBoundValue;

        private static TestBindingObject source;

        private static TextBlock target;

        private Establish context = () =>
            {
                source = new TestBindingObject { Width = InitialWidth };
                target = new TextBlock(new Mock<ISpriteFont>().Object);

                fromSource = BindingFactory.CreateOneWay<TestBindingObject, double, string>(source, o => o.Width);
            };

        private Because of = () =>
            {
                target.Bind(TextBlock.TextProperty, fromSource);
                initialBoundValue = target.Text;

                source.Width = ExpectedWidth;
            };

        private It should_1_update_the_target_property_with_the_initial_value_when_the_binding_is_created =
            () => initialBoundValue.ShouldEqual(InitialWidth.ToString());

        private It should_2_update_the_target_property_with_the_correct_value_when_the_source_value_is_changed =
            () => target.Text.ShouldEqual(ExpectedWidth.ToString());
    }

    [Subject(typeof(ReactiveObject), "One Way")]
    public class when_a_binding_is_one_way_and_the_source_property_type_is_more_derived
    {
        private static readonly SolidColorBrush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource = BindingFactory.CreateOneWay(source, o => o.SolidColorBrush);
                target.Bind(Border.BorderBrushProperty, fromSource);
            };

        private Because of = () => source.SolidColorBrush = expectedBrush;

        private It should_have_the_correct_brush = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }

    [Subject(typeof(ReactiveObject), "Two Way")]
    public class when_a_binding_is_two_way_to_a_property_on_the_data_context
    {
        private static readonly Brush expectedSourceBrush = new SolidColorBrush(Colors.Blue);

        private static readonly Brush expectedTargetBrush = new SolidColorBrush(Colors.Red);

        private static Brush actualBrushOnSource;

        private static Brush actualBrushOnTarget;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IDualChannel<Brush> twoWay = BindingFactory.CreateTwoWay<TestBindingObject, Brush>(o => o.Brush);
                target.Bind(Border.BorderBrushProperty, twoWay);

                target.DataContext = source;
                target.Measure(Size.Empty);
            };

        private Because of = () =>
            {
                target.BorderBrush = expectedTargetBrush;
                actualBrushOnSource = source.Brush;

                source.Brush = expectedSourceBrush;
                actualBrushOnTarget = target.BorderBrush;
            };

        private It should_have_the_correct_brush_on_the_source =
            () => actualBrushOnSource.ShouldEqual(expectedTargetBrush);

        private It should_have_the_correct_brush_on_the_target =
            () => actualBrushOnTarget.ShouldEqual(expectedSourceBrush);
    }

    [Subject(typeof(ReactiveObject), "Two Way")]
    public class when_a_binding_is_two_way_to_a_property_on_a_specified_source
    {
        private static readonly Brush expectedSourceBrush = new SolidColorBrush(Colors.Blue);

        private static readonly Brush expectedTargetBrush = new SolidColorBrush(Colors.Red);

        private static Brush actualBrushOnSource;

        private static Brush actualBrushOnTarget;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IDualChannel<Brush> twoWay = BindingFactory.CreateTwoWay(source, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, twoWay);
            };

        private Because of = () =>
            {
                target.BorderBrush = expectedTargetBrush;
                actualBrushOnSource = source.Brush;

                source.Brush = expectedSourceBrush;
                actualBrushOnTarget = target.BorderBrush;
            };

        private It should_have_the_correct_brush_on_the_source =
            () => actualBrushOnSource.ShouldEqual(expectedTargetBrush);

        private It should_have_the_correct_brush_on_the_target =
            () => actualBrushOnTarget.ShouldEqual(expectedSourceBrush);
    }

    [Subject(typeof(ReactiveObject), "Clear Binding")]
    public class when_a_binding_is_changed
    {
        private static readonly Brush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source1;

        private static TestBindingObject source2;

        private static Border target;

        private Establish context = () =>
            {
                source1 = new TestBindingObject();
                source2 = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource1 = BindingFactory.CreateOneWay(source1, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource1);
            };

        private Because of = () =>
            {
                IObservable<Brush> fromSource2 = BindingFactory.CreateOneWay(source2, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource2);

                source2.Brush = expectedBrush;
                source1.Brush = new SolidColorBrush(Colors.Cyan);
            };

        private It should_use_the_new_binding = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }

    [Subject(typeof(ReactiveObject), "Clear Binding")]
    public class when_a_one_way_binding_to_a_property_on_a_specified_source_is_cleared
    {
        private static readonly Brush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource = BindingFactory.CreateOneWay(source, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource);
            };

        private Because of = () =>
            {
                source.Brush = expectedBrush;
                target.ClearBinding(Border.BorderBrushProperty);

                source.Brush = new SolidColorBrush(Colors.Black);
            };

        private It should_not_use_the_binding = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }

    [Subject(typeof(ReactiveObject), "Clear Binding")]
    public class when_a_one_way_binding_to_a_property_on_the_data_context_is_cleared
    {
        private static readonly Brush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border { DataContext = source };

                IObservable<Brush> fromSource = BindingFactory.CreateOneWay<TestBindingObject, Brush>(o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource);
                target.Measure(Size.Empty);
            };

        private Because of = () =>
            {
                source.Brush = expectedBrush;
                target.ClearBinding(Border.BorderBrushProperty);

                source.Brush = new SolidColorBrush(Colors.Black);
            };

        private It should_not_use_the_binding = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }
}
