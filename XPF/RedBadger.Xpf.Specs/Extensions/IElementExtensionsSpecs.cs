#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Extensions
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Controls.Primitives;
    using RedBadger.Xpf.Extensions;

    using It = Machine.Specifications.It;

    public abstract class a_Hierarchy_of_elements
    {
        protected static Button Root;

        protected static Mock<UIElement> DeepestChild;

        private Establish context = () =>
            {
                DeepestChild = new Mock<UIElement> { CallBase = true };
                Root = new Button { Content = new ContentControl { Content = DeepestChild.Object } };
            };
    }

    [Subject(typeof(IElementExtensions))]
    public class when_searching_for_an_ancestor_of_a_specified_type_that_exists_in_the_tree : a_Hierarchy_of_elements
    {
        private It should_return_the_nearest_ancestor_of_the_requested_type =
            () => DeepestChild.Object.FindNearestAncestorOfType<ButtonBase>().ShouldBeTheSameAs(Root);
    }

    [Subject(typeof(IElementExtensions))]
    public class when_searching_for_an_ancestor_of_a_specified_type_that_does_not_exist_in_the_tree :
        a_Hierarchy_of_elements
    {
        private It should_return_the_nearest_ancestor_of_the_requested_type =
            () => DeepestChild.Object.FindNearestAncestorOfType<Image>().ShouldBeNull();
    }

    [Subject(typeof(IElementExtensions))]
    public class when_an_element_is_a_descendant_of_another_element_and_that_relationship_is_queried :
        a_Hierarchy_of_elements
    {
        private Because of = () => result = DeepestChild.Object.IsDescendantOf(Root);

        private It should_be_confirmed = () => result.ShouldBeTrue();

        private static bool result;
    }

    [Subject(typeof(IElementExtensions))]
    public class when_an_element_is_not_a_descendant_of_another_element_and_that_relationship_is_queried :
        a_Hierarchy_of_elements
    {
        private Establish context = () => orphan = new Mock<UIElement> { CallBase = true };

        private Because of = () => result = orphan.Object.IsDescendantOf(Root);

        private It should_be_denied = () => result.ShouldBeFalse();

        private static bool result;

        private static Mock<UIElement> orphan;
    }
}
