#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.GridLengthSpecs
{
    using System;

    using Machine.Specifications;

    public abstract class a_GridLength
    {
        protected static GridLength gridLength;

        private Establish context = () => gridLength = new GridLength();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized
    {
        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength();

        private It should_default_to_a_unit_type_of_auto = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Auto);

        private It should_default_to_a_value_of_zero = () => gridLength.Value.ShouldEqual(0);
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_that_is_not_a_number
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => new GridLength(double.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentException>();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_that_is_infinite
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => new GridLength(double.PositiveInfinity));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentException>();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value
    {
        private const double ExpectedValue = 10;

        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength(ExpectedValue);

        private It should_have_a_unit_type_of_pixel = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Pixel);

        private It should_have_the_value_specified = () => gridLength.Value.ShouldEqual(ExpectedValue);
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_and_a_unit_type_of_auto
    {
        private const double ExpectedValue = 1;

        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength(10, GridUnitType.Auto);

        private It should_have_a_unit_type_of_auto = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Auto);

        private It should_have_the_value_of_one = () => gridLength.Value.ShouldEqual(ExpectedValue);
    }

    [Subject(typeof(GridLength))]
    public class when_asked_for_an_auto_gridlength
    {
        private static GridLength gridLength;

        private Because of = () => gridLength = GridLength.Auto;

        private It should_return_a_grid_length_with_GridUnitType_of_auto =
            () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Auto);

        private It should_return_a_grid_length_with_unit_value = () => gridLength.Value.ShouldEqual(1);
    }
}
