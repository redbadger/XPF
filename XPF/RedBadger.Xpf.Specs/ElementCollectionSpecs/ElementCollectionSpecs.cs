#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.ElementCollectionSpecs
{
    using Machine.Specifications;

    [Subject(typeof(ElementCollection), "Visual Parent")]
    public class when_adding_an_element_to : an_ElementCollection
    {
        private Establish context = () => Owner.Object.Measure(new Size());

        private Because of = () => ElementCollection.Add(Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child1.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);
    }

    [Subject(typeof(ElementCollection), "Visual Parent")]
    public class when_setting_an_element_in : an_ElementCollection
    {
        private Establish context = () =>
            {
                ElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => ElementCollection[0] = Child2.Object;

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child2.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);

        private It should_unset_the_old_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(ElementCollection), "Visual Parent")]
    public class when_removing_an_element_from : an_ElementCollection
    {
        private Establish context = () =>
            {
                ElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => ElementCollection.Remove(Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_unset_the_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(ElementCollection), "Visual Parent")]
    public class when_removing_an_element_at_a_certain_position_from : an_ElementCollection
    {
        private Establish context = () =>
            {
                ElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => ElementCollection.RemoveAt(0);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_unset_the_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(ElementCollection), "Visual Parent")]
    public class when_inserting_an_element_into : an_ElementCollection
    {
        private Establish context = () => Owner.Object.Measure(Size.Empty);

        private Because of = () => ElementCollection.Insert(0, Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child1.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);
    }
}
