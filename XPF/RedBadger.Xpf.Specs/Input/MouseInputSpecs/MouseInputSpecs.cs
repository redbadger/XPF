#region License
/* The MIT License
 *
 * Copyright (c) 2011 Red Badger Consulting
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
*/
#endregion

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Input.MouseInputSpecs
{
    using System.Collections.Generic;
    using System.Reactive.Subjects;
    using Machine.Specifications;
    using Moq;
    using Moq.Protected;
    using RedBadger.Xpf.Adapters.Xna;
    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Controls.Primitives;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Input;
    using It = Machine.Specifications.It;

    public abstract class a_RootElement_with_input_manager
    {
        protected const string OnNextGesture = "OnNextGesture";

        protected static Mock<IInputManager> InputManager;

        protected static Subject<Gesture> MouseData;

        protected static Mock<Renderer> Renderer;

        protected static RootElement RootElement;

        protected static Rect ViewPort = new Rect(10, 20, 100, 100);

        private Establish context = () =>
            {
                Renderer = new Mock<Renderer>(new Mock<ISpriteBatch>().Object, new Mock<IPrimitivesService>().Object)
                    {
                       CallBase = true 
                    };

                MouseData = new Subject<Gesture>();
                InputManager = new Mock<IInputManager>();
                InputManager.SetupGet(inputManager => inputManager.Gestures).Returns(MouseData);

                RootElement = new RootElement(ViewPort, Renderer.Object, InputManager.Object);
            };
    }

    [Subject("Mouse Input - Left Button Down")]
    public class when_a_single_control_is_placed_inside_a_root_element : a_RootElement_with_input_manager
    {
        private static Mock<ButtonBase> button;

        private Establish context = () =>
            {
                button = new Mock<ButtonBase> { CallBase = true };
                RootElement.Content = button.Object;
            };

        private Because of = () =>
            {
                RootElement.Update();
                MouseData.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(40, 50)));
            };

        private It should_notify_the_button_that_the_left_mouse_was_pressed =
            () =>
            button.Protected().Verify(
                OnNextGesture, Times.Once(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));
    }

    [Subject("Mouse Input - Left Button Down")]
    public class when_mouse_left_button_is_pressed_over_the_top_of_a_Z_ordered_stack_of_elements :
        a_RootElement_with_input_manager
    {
        private static Mock<ButtonBase> bottomButton;

        private static Mock<Grid> grid;

        private static Mock<ButtonBase> topButton;

        private Establish context = () =>
            {
                grid = new Mock<Grid> { CallBase = true };

                bottomButton = new Mock<ButtonBase> { CallBase = true };
                bottomButton.Object.Width = bottomButton.Object.Height = 100;
                grid.Object.Children.Add(bottomButton.Object);

                topButton = new Mock<ButtonBase> { CallBase = true };
                topButton.Object.Width = topButton.Object.Height = 100;
                grid.Object.Children.Add(topButton.Object);

                RootElement.Content = grid.Object;
            };

        private Because of = () =>
            {
                RootElement.Update();
                MouseData.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(40, 50)));
            };

        private It should_not_raise_left_mouse_button_down_event_on_the_bottom_most_element =
            () => bottomButton.Protected().Verify(OnNextGesture, Times.Never(), ItExpr.IsAny<Gesture>());

        private It should_raise_left_mouse_button_down_event_on_the_top_most_element =
            () =>
            topButton.Protected().Verify(
                OnNextGesture, Times.Once(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));
    }

    [Subject("Mouse Input - Left Button Down")]
    public class when_mouse_left_button_is_pressed_over_the_top_of_a_nested_stack_of_elements :
        a_RootElement_with_input_manager
    {
        private static Mock<ButtonBase> innerButton;

        private static Mock<ButtonBase> outerButton;

        private Establish context = () =>
            {
                outerButton = new Mock<ButtonBase> { CallBase = true };
                outerButton.Object.Width = outerButton.Object.Height = 100;

                innerButton = new Mock<ButtonBase> { CallBase = true };
                innerButton.Object.Width = innerButton.Object.Height = 100;

                outerButton.Object.Content = innerButton.Object;
                RootElement.Content = outerButton.Object;
            };

        private Because of = () =>
            {
                RootElement.Update();
                MouseData.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(40, 50)));
            };

        private It should_not_raise_left_mouse_button_down_event_on_the_bottom_most_element =
            () =>
            outerButton.Protected().Verify(
                OnNextGesture, Times.Never(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));

        private It should_raise_left_mouse_button_down_event_on_the_top_most_element =
            () =>
            innerButton.Protected().Verify(
                OnNextGesture, Times.Once(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));
    }

    [Subject("Mouse Input - Left Button Down")]
    public class when_mouse_left_button_is_pressed_over_the_first_of_a_vertical_stack_of_elements :
        a_RootElement_with_input_manager
    {
        private static Mock<ButtonBase> bottomButton;

        private static Mock<StackPanel> stackPanel;

        private static Mock<ButtonBase> topButton;

        private Establish context = () =>
            {
                stackPanel = new Mock<StackPanel> { CallBase = true };

                topButton = new Mock<ButtonBase> { CallBase = true };
                topButton.Object.Width = 100;
                topButton.Object.Height = 50;
                stackPanel.Object.Children.Add(topButton.Object);

                bottomButton = new Mock<ButtonBase> { CallBase = true };
                bottomButton.Object.Width = 100;
                bottomButton.Object.Height = 50;
                stackPanel.Object.Children.Add(bottomButton.Object);

                RootElement.Content = stackPanel.Object;
            };

        private Because of = () =>
            {
                RootElement.Update();
                MouseData.OnNext(new Gesture(GestureType.LeftButtonDown, new Point(40, 50)));
            };

        private It should_not_raise_left_mouse_button_down_event_on_the_bottom_most_element =
            () =>
            bottomButton.Protected().Verify(
                OnNextGesture, Times.Never(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));

        private It should_raise_left_mouse_button_down_event_on_the_top_most_element =
            () =>
            topButton.Protected().Verify(
                OnNextGesture, Times.Once(), ItExpr.Is<Gesture>(data => data.Type == GestureType.LeftButtonDown));
    }
}
